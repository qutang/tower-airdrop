android.support.v4.app.ActivityCompat -> android.support.v4.app.a:
    void finishAfterTransition(android.app.Activity) -> a
android.support.v4.app.ActivityCompat21 -> android.support.v4.app.b:
    void finishAfterTransition(android.app.Activity) -> a
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.c:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.d:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.util.ArrayList mSharedElementSourceNames -> t
    java.util.ArrayList mSharedElementTargetNames -> u
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void setFirstOut(android.util.SparseArray,android.support.v4.app.Fragment) -> a
    void setLastIn(android.util.SparseArray,android.support.v4.app.Fragment) -> b
    void calculateFragments(android.util.SparseArray,android.util.SparseArray) -> b
    void calculateBackFragments(android.util.SparseArray,android.util.SparseArray) -> a
    android.support.v4.app.BackStackRecord$TransitionState popFromBackStack(boolean,android.support.v4.app.BackStackRecord$TransitionState,android.util.SparseArray,android.util.SparseArray) -> a
    java.lang.String getName() -> b
    android.support.v4.app.BackStackRecord$TransitionState beginTransition(android.util.SparseArray,android.util.SparseArray,boolean) -> a
    java.lang.Object getEnterTransition(android.support.v4.app.Fragment,boolean) -> a
    java.lang.Object getExitTransition(android.support.v4.app.Fragment,boolean) -> b
    java.lang.Object getSharedElementTransition(android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean) -> a
    java.lang.Object captureExitingViews(java.lang.Object,android.support.v4.app.Fragment,java.util.ArrayList,android.support.v4.util.ArrayMap) -> a
    android.support.v4.util.ArrayMap remapSharedElements(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,boolean) -> a
    boolean configureTransitions(int,android.support.v4.app.BackStackRecord$TransitionState,boolean,android.util.SparseArray,android.util.SparseArray) -> a
    void prepareSharedElementTransition(android.support.v4.app.BackStackRecord$TransitionState,android.view.View,java.lang.Object,android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean,java.util.ArrayList) -> a
    void callSharedElementEnd(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean,android.support.v4.util.ArrayMap) -> a
    void setEpicenterIn(android.support.v4.util.ArrayMap,android.support.v4.app.BackStackRecord$TransitionState) -> a
    android.support.v4.util.ArrayMap mapSharedElementsIn(android.support.v4.app.BackStackRecord$TransitionState,boolean,android.support.v4.app.Fragment) -> a
    android.support.v4.util.ArrayMap remapNames(java.util.ArrayList,java.util.ArrayList,android.support.v4.util.ArrayMap) -> a
    android.support.v4.util.ArrayMap mapEnteringSharedElements(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,boolean) -> b
    void excludeHiddenFragmentsAfterEnter(android.view.View,android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> a
    void excludeHiddenFragments(android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> a
    void setNameOverride(android.support.v4.util.ArrayMap,java.lang.String,java.lang.String) -> a
    void setNameOverrides(android.support.v4.app.BackStackRecord$TransitionState,java.util.ArrayList,java.util.ArrayList) -> a
    void setBackNameOverrides(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.util.ArrayMap,boolean) -> a
    void setNameOverrides(android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.util.ArrayMap,boolean) -> b
    android.support.v4.util.ArrayMap access$000(android.support.v4.app.BackStackRecord,android.support.v4.app.BackStackRecord$TransitionState,boolean,android.support.v4.app.Fragment) -> a
    void access$100(android.support.v4.app.BackStackRecord,android.support.v4.util.ArrayMap,android.support.v4.app.BackStackRecord$TransitionState) -> a
    void access$200(android.support.v4.app.BackStackRecord,android.support.v4.app.BackStackRecord$TransitionState,android.support.v4.app.Fragment,android.support.v4.app.Fragment,boolean,android.support.v4.util.ArrayMap) -> a
    void access$300(android.support.v4.app.BackStackRecord,android.support.v4.app.BackStackRecord$TransitionState,int,java.lang.Object) -> a
android.support.v4.app.BackStackRecord$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment val$inFragment -> a
    android.support.v4.app.BackStackRecord this$0 -> b
    android.view.View getView() -> a
android.support.v4.app.BackStackRecord$2 -> android.support.v4.app.f:
    android.view.View val$sceneRoot -> a
    java.lang.Object val$sharedElementTransition -> b
    java.util.ArrayList val$sharedElementTargets -> c
    android.support.v4.app.BackStackRecord$TransitionState val$state -> d
    boolean val$isBack -> e
    android.support.v4.app.Fragment val$inFragment -> f
    android.support.v4.app.Fragment val$outFragment -> g
    android.support.v4.app.BackStackRecord this$0 -> h
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.BackStackRecord$3 -> android.support.v4.app.g:
    android.view.View val$sceneRoot -> a
    android.support.v4.app.BackStackRecord$TransitionState val$state -> b
    int val$containerId -> c
    java.lang.Object val$transition -> d
    android.support.v4.app.BackStackRecord this$0 -> e
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.h:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackRecord$TransitionState -> android.support.v4.app.i:
    android.support.v4.util.ArrayMap nameOverrides -> a
    java.util.ArrayList hiddenFragmentViews -> b
    android.support.v4.app.FragmentTransitionCompat21$EpicenterView enteringEpicenterView -> c
    android.view.View nonExistentView -> d
    android.support.v4.app.BackStackRecord this$0 -> e
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    java.util.ArrayList mSharedElementSourceNames -> j
    java.util.ArrayList mSharedElementTargetNames -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.j:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> aa
    java.lang.Object USE_DEFAULT_TRANSITION -> a
    int mState -> b
    android.view.View mAnimatingAway -> c
    int mStateAfterAnimating -> d
    android.os.Bundle mSavedFragmentState -> e
    android.util.SparseArray mSavedViewState -> f
    int mIndex -> g
    java.lang.String mWho -> h
    android.os.Bundle mArguments -> i
    android.support.v4.app.Fragment mTarget -> j
    int mTargetIndex -> k
    int mTargetRequestCode -> l
    boolean mAdded -> m
    boolean mRemoving -> n
    boolean mResumed -> o
    boolean mFromLayout -> p
    boolean mInLayout -> q
    boolean mRestored -> r
    int mBackStackNesting -> s
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> t
    android.support.v4.app.FragmentActivity mActivity -> u
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> v
    android.support.v4.app.Fragment mParentFragment -> w
    int mFragmentId -> x
    int mContainerId -> y
    java.lang.String mTag -> z
    boolean mHidden -> A
    boolean mDetached -> B
    boolean mRetainInstance -> C
    boolean mRetaining -> D
    boolean mHasMenu -> E
    boolean mMenuVisible -> F
    boolean mCalled -> G
    int mNextAnim -> H
    android.view.ViewGroup mContainer -> I
    android.view.View mView -> J
    android.view.View mInnerView -> K
    boolean mDeferStart -> L
    boolean mUserVisibleHint -> M
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> N
    boolean mLoadersStarted -> O
    boolean mCheckedForLoaderManager -> P
    java.lang.Object mEnterTransition -> Q
    java.lang.Object mReturnTransition -> R
    java.lang.Object mExitTransition -> S
    java.lang.Object mReenterTransition -> T
    java.lang.Object mSharedElementEnterTransition -> U
    java.lang.Object mSharedElementReturnTransition -> V
    java.lang.Boolean mAllowReturnTransitionOverlap -> W
    java.lang.Boolean mAllowEnterTransitionOverlap -> X
    android.support.v4.app.SharedElementCallback mEnterTransitionCallback -> Y
    android.support.v4.app.SharedElementCallback mExitTransitionCallback -> Z
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    android.support.v4.app.FragmentManager getChildFragmentManager() -> d
    boolean isAdded() -> e
    boolean isDetached() -> f
    boolean isHidden() -> g
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> h
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> i
    void onResume() -> j
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> k
    void onStop() -> l
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> m
    void onDestroy() -> n
    void initState() -> o
    void onDetach() -> p
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> q
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    java.lang.Object getEnterTransition() -> r
    java.lang.Object getReturnTransition() -> s
    java.lang.Object getExitTransition() -> t
    java.lang.Object getReenterTransition() -> u
    java.lang.Object getSharedElementEnterTransition() -> v
    java.lang.Object getSharedElementReturnTransition() -> w
    boolean getAllowEnterTransitionOverlap() -> x
    boolean getAllowReturnTransitionOverlap() -> y
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> z
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> A
    void performResume() -> B
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> C
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> D
    void performStop() -> E
    void performReallyStop() -> F
    void performDestroyView() -> G
    void performDestroy() -> H
android.support.v4.app.Fragment$1 -> android.support.v4.app.k:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
    boolean hasView() -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.l:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.m:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.n:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void supportFinishAfterTransition() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> b
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> c
    void supportInvalidateOptionsMenu() -> d
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> e
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.o:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.p:
    android.view.View findViewById(int) -> a
    boolean hasView() -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.q:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.r:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.s:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> u
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    android.view.LayoutInflater$Factory getLayoutInflaterFactory() -> t
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.u:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerImpl$FragmentTag -> android.support.v4.app.v:
    int[] Fragment -> a
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.w:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.x:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.y:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.z:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.aa:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.ab:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.FragmentTransitionCompat21 -> android.support.v4.app.ac:
    java.lang.String getTransitionName(android.view.View) -> a
    java.lang.Object cloneTransition(java.lang.Object) -> a
    java.lang.Object captureExitingViews(java.lang.Object,android.view.View,java.util.ArrayList,java.util.Map) -> a
    void excludeTarget(java.lang.Object,android.view.View,boolean) -> a
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object) -> a
    void setEpicenter(java.lang.Object,android.view.View) -> a
    void addTransitionTargets(java.lang.Object,java.lang.Object,android.view.View,android.support.v4.app.FragmentTransitionCompat21$ViewRetriever,android.view.View,android.support.v4.app.FragmentTransitionCompat21$EpicenterView,java.util.Map,java.util.ArrayList,java.util.Map,java.util.ArrayList) -> a
    java.lang.Object mergeTransitions(java.lang.Object,java.lang.Object,java.lang.Object,boolean) -> a
    void setSharedElementEpicenter(android.transition.Transition,android.support.v4.app.FragmentTransitionCompat21$EpicenterView) -> a
    android.graphics.Rect getBoundsOnScreen(android.view.View) -> c
    void captureTransitioningViews(java.util.ArrayList,android.view.View) -> b
    void findNamedViews(java.util.Map,android.view.View) -> a
    void cleanupTransitions(android.view.View,android.view.View,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.util.Map) -> a
    void removeTargets(java.lang.Object,java.util.ArrayList) -> a
    void addTargets(java.lang.Object,java.util.ArrayList) -> b
    void access$000(java.util.ArrayList,android.view.View) -> a
    android.graphics.Rect access$100(android.view.View) -> b
android.support.v4.app.FragmentTransitionCompat21$1 -> android.support.v4.app.ad:
    android.graphics.Rect val$epicenter -> a
    android.graphics.Rect onGetEpicenter(android.transition.Transition) -> onGetEpicenter
android.support.v4.app.FragmentTransitionCompat21$2 -> android.support.v4.app.ae:
    android.view.View val$container -> a
    android.support.v4.app.FragmentTransitionCompat21$ViewRetriever val$inFragment -> b
    java.util.Map val$nameOverrides -> c
    java.util.Map val$renamedViews -> d
    android.transition.Transition val$enterTransition -> e
    java.util.ArrayList val$enteringViews -> f
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.FragmentTransitionCompat21$3 -> android.support.v4.app.af:
    android.graphics.Rect mEpicenter -> b
    android.support.v4.app.FragmentTransitionCompat21$EpicenterView val$epicenterView -> a
    android.graphics.Rect onGetEpicenter(android.transition.Transition) -> onGetEpicenter
android.support.v4.app.FragmentTransitionCompat21$4 -> android.support.v4.app.ag:
    android.view.View val$sceneRoot -> a
    android.transition.Transition val$enterTransition -> b
    android.view.View val$nonExistentView -> c
    java.util.ArrayList val$enteringViews -> d
    android.transition.Transition val$exitTransition -> e
    java.util.ArrayList val$exitingViews -> f
    android.transition.Transition val$sharedElementTransition -> g
    java.util.ArrayList val$sharedElementTargets -> h
    java.util.Map val$renamedViews -> i
    java.util.ArrayList val$hiddenViews -> j
    android.transition.Transition val$overallTransition -> k
    boolean onPreDraw() -> onPreDraw
android.support.v4.app.FragmentTransitionCompat21$EpicenterView -> android.support.v4.app.ah:
    android.view.View epicenter -> a
android.support.v4.app.FragmentTransitionCompat21$ViewRetriever -> android.support.v4.app.ai:
    android.view.View getView() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.aj:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.ak:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.al:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.am:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.an:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SharedElementCallback -> android.support.v4.app.ao:
    void onSharedElementStart(java.util.List,java.util.List,java.util.List) -> a
    void onSharedElementEnd(java.util.List,java.util.List,java.util.List) -> b
    void onMapSharedElements(java.util.List,java.util.Map) -> a
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ap:
android.support.v4.content.ContextCompat -> android.support.v4.a.a:
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> a
android.support.v4.content.ContextCompatApi21 -> android.support.v4.a.b:
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> a
android.support.v4.content.Loader -> android.support.v4.a.c:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.d:
android.support.v4.media.MediaMetadataCompat -> android.support.v4.media.MediaMetadataCompat:
    android.support.v4.util.ArrayMap METADATA_KEYS_TYPE -> a
    android.os.Bundle mBundle -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.media.MediaMetadataCompat$1 -> android.support.v4.media.a:
    android.support.v4.media.MediaMetadataCompat createFromParcel(android.os.Parcel) -> a
    android.support.v4.media.MediaMetadataCompat[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.media.RatingCompat -> android.support.v4.media.RatingCompat:
    int mRatingStyle -> a
    float mRatingValue -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.media.RatingCompat$1 -> android.support.v4.media.b:
    android.support.v4.media.RatingCompat createFromParcel(android.os.Parcel) -> a
    android.support.v4.media.RatingCompat[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.media.session.MediaSessionCompat -> android.support.v4.media.session.MediaSessionCompat:
android.support.v4.media.session.MediaSessionCompat$Token -> android.support.v4.media.session.MediaSessionCompat$Token:
    android.os.Parcelable mInner -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.media.session.MediaSessionCompat$Token$1 -> android.support.v4.media.session.a:
    android.support.v4.media.session.MediaSessionCompat$Token createFromParcel(android.os.Parcel) -> a
    android.support.v4.media.session.MediaSessionCompat$Token[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.media.session.PlaybackStateCompat -> android.support.v4.media.session.PlaybackStateCompat:
    int mState -> a
    long mPosition -> b
    long mBufferedPosition -> c
    float mSpeed -> d
    long mActions -> e
    java.lang.CharSequence mErrorMessage -> f
    long mUpdateTime -> g
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.media.session.PlaybackStateCompat$1 -> android.support.v4.media.session.b:
    android.support.v4.media.session.PlaybackStateCompat createFromParcel(android.os.Parcel) -> a
    android.support.v4.media.session.PlaybackStateCompat[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.c.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    boolean retainAll(java.util.Collection) -> a
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.c.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.c.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.MapCollections -> android.support.v4.c.f:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.c.g:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.c.h:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.c.i:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.c.j:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.c.k:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.c.l:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfKey(java.lang.Object) -> a
    int indexOfValue(java.lang.Object) -> b
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.m:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.c:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.d:
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.f:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
android.support.v4.view.GestureDetectorCompat -> android.support.v4.view.g:
    android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl mImpl -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> a
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl -> android.support.v4.view.h:
    boolean onTouchEvent(android.view.MotionEvent) -> a
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> a
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase -> android.support.v4.view.i:
    int mTouchSlopSquare -> a
    int mDoubleTapSlopSquare -> b
    int mMinimumFlingVelocity -> c
    int mMaximumFlingVelocity -> d
    int LONGPRESS_TIMEOUT -> e
    int TAP_TIMEOUT -> f
    int DOUBLE_TAP_TIMEOUT -> g
    android.os.Handler mHandler -> h
    android.view.GestureDetector$OnGestureListener mListener -> i
    android.view.GestureDetector$OnDoubleTapListener mDoubleTapListener -> j
    boolean mStillDown -> k
    boolean mDeferConfirmSingleTap -> l
    boolean mInLongPress -> m
    boolean mAlwaysInTapRegion -> n
    boolean mAlwaysInBiggerTapRegion -> o
    android.view.MotionEvent mCurrentDownEvent -> p
    android.view.MotionEvent mPreviousUpEvent -> q
    boolean mIsDoubleTapping -> r
    float mLastFocusX -> s
    float mLastFocusY -> t
    float mDownFocusX -> u
    float mDownFocusY -> v
    boolean mIsLongpressEnabled -> w
    android.view.VelocityTracker mVelocityTracker -> x
    void init(android.content.Context) -> a
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
    void cancel() -> a
    void cancelTaps() -> b
    boolean isConsideredDoubleTap(android.view.MotionEvent,android.view.MotionEvent,android.view.MotionEvent) -> a
    void dispatchLongPress() -> c
    android.view.MotionEvent access$000(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> a
    android.view.GestureDetector$OnGestureListener access$100(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> b
    void access$200(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> c
    android.view.GestureDetector$OnDoubleTapListener access$300(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> d
    boolean access$400(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> e
    boolean access$502(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase,boolean) -> a
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler -> android.support.v4.view.j:
    android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2 -> android.support.v4.view.k:
    android.view.GestureDetector mDetector -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> a
android.support.v4.view.GravityCompat -> android.support.v4.view.l:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.m:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.n:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.o:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.p:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.q:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.r:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.s:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.t:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.u:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.v:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.w:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.x:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.y:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.z:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.aa:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.ab:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.ac:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.ad:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.ae:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.af:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ag:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.ah:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.ai:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
    boolean getFitsSystemWindows(android.view.View) -> f
android.support.v4.view.ViewCompat$Api21ViewCompatImpl -> android.support.v4.view.aj:
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ak:
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
    boolean getFitsSystemWindows(android.view.View) -> f
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.al:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.am:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.an:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ao:
    boolean accessibilityDelegateCheckFailed -> b
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ap:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    boolean getFitsSystemWindows(android.view.View) -> f
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.aq:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.ar:
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.as:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
    boolean getFitsSystemWindows(android.view.View) -> f
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.at:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.au:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.av:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aw:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ax:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> a
    boolean getFitsSystemWindows(android.view.View) -> b
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.ay:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> aa
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> ab
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ac
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ad
    int mDrawingOrder -> ae
    java.util.ArrayList mDrawingOrderedChildren -> af
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ag
    java.lang.Runnable mEndScrollRunnable -> ah
    int mScrollState -> ai
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.az:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ba:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.bb:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.bc:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.bd:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.be:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.bf:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.bg:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.bh:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bi:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.bj:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> b
    boolean CAN_HIDE_DESCENDANTS -> c
    android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate -> d
    int mMinDrawerMargin -> e
    int mScrimColor -> f
    float mScrimOpacity -> g
    android.graphics.Paint mScrimPaint -> h
    android.support.v4.widget.ViewDragHelper mLeftDragger -> i
    android.support.v4.widget.ViewDragHelper mRightDragger -> j
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> k
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> l
    int mDrawerState -> m
    boolean mInLayout -> n
    boolean mFirstLayout -> o
    int mLockModeLeft -> p
    int mLockModeRight -> q
    boolean mDisallowInterceptRequested -> r
    boolean mChildrenCanceledTouch -> s
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> t
    float mInitialMotionX -> u
    float mInitialMotionY -> v
    android.graphics.drawable.Drawable mShadowLeft -> w
    android.graphics.drawable.Drawable mShadowRight -> x
    android.graphics.drawable.Drawable mStatusBarBackground -> y
    java.lang.Object mLastInsets -> z
    boolean mDrawStatusBarBackground -> A
    android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImpl IMPL -> a
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void updateChildrenImportantForAccessibility(android.view.View,boolean) -> a
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    void setStatusBarBackground(android.graphics.drawable.Drawable) -> setStatusBarBackground
    void setStatusBarBackground(int) -> setStatusBarBackground
    void setStatusBarBackgroundColor(int) -> setStatusBarBackgroundColor
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate -> android.support.v4.widget.a:
android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImpl -> android.support.v4.widget.b:
    void dispatchChildInsets(android.view.View,java.lang.Object,int) -> a
    void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams,java.lang.Object,int) -> a
    int getTopInset(java.lang.Object) -> a
android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImplApi21 -> android.support.v4.widget.c:
    void dispatchChildInsets(android.view.View,java.lang.Object,int) -> a
    void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams,java.lang.Object,int) -> a
    int getTopInset(java.lang.Object) -> a
android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImplBase -> android.support.v4.widget.d:
    void dispatchChildInsets(android.view.View,java.lang.Object,int) -> a
    void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams,java.lang.Object,int) -> a
    int getTopInset(java.lang.Object) -> a
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.e:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.f:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.g:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.h:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.DrawerLayoutCompatApi21 -> android.support.v4.widget.i:
    void dispatchChildInsets(android.view.View,java.lang.Object,int) -> a
    void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams,java.lang.Object,int) -> a
    int getTopInset(java.lang.Object) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.j:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.k:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.l:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.m:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.n:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.o:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl mImpl -> b
    int getCurrX() -> a
    int getCurrY() -> b
    int getFinalX() -> c
    int getFinalY() -> d
    boolean computeScrollOffset() -> e
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> f
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.p:
    int getCurrX(java.lang.Object) -> a
    int getCurrY(java.lang.Object) -> b
    boolean computeScrollOffset(java.lang.Object) -> c
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> d
    int getFinalX(java.lang.Object) -> e
    int getFinalY(java.lang.Object) -> f
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawableLeft -> d
    android.graphics.drawable.Drawable mShadowDrawableRight -> e
    int mOverhangSize -> f
    boolean mCanSlide -> g
    android.view.View mSlideableView -> h
    float mSlideOffset -> i
    float mParallaxOffset -> j
    int mSlideRange -> k
    boolean mIsUnableToDrag -> l
    int mParallaxBy -> m
    float mInitialMotionX -> n
    float mInitialMotionY -> o
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> p
    android.support.v4.widget.ViewDragHelper mDragHelper -> q
    boolean mPreservedOpenState -> r
    boolean mFirstLayout -> s
    android.graphics.Rect mTmpRect -> t
    java.util.ArrayList mPostedRunnables -> u
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowDrawableLeft(android.graphics.drawable.Drawable) -> setShadowDrawableLeft
    void setShadowDrawableRight(android.graphics.drawable.Drawable) -> setShadowDrawableRight
    void setShadowResource(int) -> setShadowResource
    void setShadowResourceLeft(int) -> setShadowResourceLeft
    void setShadowResourceRight(int) -> setShadowResourceRight
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    boolean isLayoutRtlSupport() -> f
    void access$1000(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1100(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.q:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.r:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.s:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.t:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.u:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.v:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.w:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.x:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.y:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.z:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    void setEdgeTrackingEnabled(int) -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> b
    void setDragState(int) -> c
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> d
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.aa:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.ab:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
edu.neu.mhealth.qutang.towerairdrop.Constants -> edu.neu.mhealth.qutang.towerairdrop.a:
    float LANDSCAPE_RANGE_INTERVAL_SHAKING -> a
    float LANDSCAPE_MIN_INTERVAL_SHAKING -> b
    float LANDSCAPE_RANGE_INTERVAL_TILT -> c
    float LANDSCAPE_MIN_INTERVAL_TILT -> d
    float CARRIER_SPEED -> e
    float LANDSCAPE_SPEED_TILTING -> f
    float LANDSCAPE_SPEED_SHAKING -> g
    float LANDSCAPE_UP_ACCEL -> h
    float MAX_TILT_SPEED -> i
    float MAX_TILT_ANGLE -> j
    float PARACHUTE_UP_SPEED -> k
    float PARACHUTE_DOWN_SPEED -> l
    float BOX_STACK_SPEED -> m
    float OBSTACLE_X_MIN_SPEED -> n
    float OBSTACLE_X_RANGE_SPEED -> o
    float OBSTACLE_Y_MIN_SPEED -> p
    float OBSTACLE_Y_RANGE_SPEED -> q
    float BOX_SHAKE_SPEED -> r
    org.jbox2d.common.Vec2 GRAVITY_FORCE_DEFAULT -> s
    org.jbox2d.common.Vec2 NO_GRAVITY -> t
    float PARACHUTE_FORCE_TILT -> u
    float BOX_FORCE_TILT -> v
    android.content.SharedPreferences SHAREDPREFERENCES -> w
edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE -> edu.neu.mhealth.qutang.towerairdrop.b:
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE SETTING -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE PAUSE -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE PLAY -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE QUIT -> d
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE[] $VALUES -> e
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM -> edu.neu.mhealth.qutang.towerairdrop.c:
    edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM EMERGENCY -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM PAUSE -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM[] $VALUES -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE -> edu.neu.mhealth.qutang.towerairdrop.d:
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE STUCK -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE BLIND -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE LIGHTNING -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE[] $VALUES -> d
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS -> edu.neu.mhealth.qutang.towerairdrop.e:
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS SHOW_TOAST -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS HANDLER_TEST -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS BEING_SHAKING -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS PAUSE_SHAKING -> d
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS INIT_SCENE -> e
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS SCENE_CREATED -> f
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS ACTION_READY -> g
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_RUNNING -> h
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS SCENE_ENDING -> i
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS NEXT_SCENE -> j
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_OVER -> k
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_PAUSE -> l
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_RESUME -> m
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_SAVE -> n
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_LOAD -> o
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GAME_QUIT -> p
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS STACK -> q
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS STUCK -> r
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS EMERGENCY -> s
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS TILT_FLAG -> t
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS BOX_COLLIDE -> u
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS FINISH_STACK -> v
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS GOOD_SHAKE -> w
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS SLOW_SHAKE -> x
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS TILT_INSTRUCTION -> y
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS[] $VALUES -> z
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM -> edu.neu.mhealth.qutang.towerairdrop.f:
    edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM DIALOG -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM COVER -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM[] $VALUES -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE -> edu.neu.mhealth.qutang.towerairdrop.g:
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE HEIGHT -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE PARACHUTE -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE TILT -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE[] $VALUES -> d
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM -> edu.neu.mhealth.qutang.towerairdrop.h:
    edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM MENU -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM LOCK -> b
    edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM[] $VALUES -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.Flags -> edu.neu.mhealth.qutang.towerairdrop.i:
    float screenW -> a
    float screenH -> b
    int sensorScenario -> c
    edu.neu.mhealth.qutang.towerairdrop.Constants$GAME_EVENTS scenarioStatus -> d
    int currentLevel -> e
    org.jbox2d.common.Vec2 screenOffset -> f
    org.jbox2d.common.Vec2 cameraCenter -> g
    int currentScore -> h
    long totalTiltTime -> i
    float boxDropSpeed -> j
    float initBasePosX -> k
    float max_offset -> l
    float shakeProgress -> m
    int totalMove -> n
    float shakeSensitivity -> o
    float parachuteGonePos -> p
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BackgroundObject bg -> q
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ButtonObject btnPause -> r
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ButtonObject btnQuit -> s
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TextObject scoreText -> t
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TextObject levelText -> u
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ProgressObject progressBar -> v
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.EmergencyObject currentEmergency -> w
    boolean isInEmergency -> x
    boolean emergencyInQueue -> y
    long emergencyTimer -> z
    float emergencyInterval -> A
    long shakeCounter -> B
    long previousShakeCounter -> C
    boolean isGamePaused -> D
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ProgressObject heightBar -> E
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ProgressObject tiltBar -> F
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.DeadlineObject deadline -> G
    long currentTiltTime -> H
    float shakeSpeed -> I
    boolean isTowerReady -> J
    boolean isTowerCreated -> K
    boolean isStacked -> L
    int num_obstacles -> M
    long obstacleTimer -> N
    long obstacleInterval -> O
    boolean useSmartCamera -> P
    long landscapeTimer -> Q
    float landscapeInterval -> R
    float landscapeSpeed -> S
    boolean instructionShakeMode -> T
    boolean instructionTitleMode -> U
    boolean firstlowShakeDialog -> V
    boolean instructionDialogSelect -> W
    boolean sensorStart -> X
    edu.neu.mhealth.qutang.towerairdrop.Constants$RESUME_FROM resumeFrom -> Y
    edu.neu.mhealth.qutang.towerairdrop.Constants$PAUSE_FROM pauseFrom -> Z
    edu.neu.mhealth.qutang.towerairdrop.Flags mInstance -> aa
    edu.neu.mhealth.qutang.towerairdrop.Flags getFlags() -> a
    edu.neu.mhealth.qutang.towerairdrop.Flags resetFlags() -> b
edu.neu.mhealth.qutang.towerairdrop.GameApplication -> edu.neu.mhealth.qutang.towerairdrop.GameApplication:
    android.content.Context context -> b
    int score -> a
    void onCreate() -> onCreate
    android.content.Context getAppContext() -> a
    int getScore() -> b
    void setScore(int) -> a
edu.neu.mhealth.qutang.towerairdrop.GameMusicPlayer -> edu.neu.mhealth.qutang.towerairdrop.j:
    android.media.MediaPlayer mp -> a
    android.media.MediaPlayer background_mp -> b
    void playSound(android.content.Context,int) -> a
    void stopSound(android.content.Context) -> a
    boolean isPlayingSound() -> a
    void playBackgroundMusic(android.content.Context,int) -> b
    void stopBackgroundMusic(android.content.Context) -> b
edu.neu.mhealth.qutang.towerairdrop.GameView -> edu.neu.mhealth.qutang.towerairdrop.GameView:
    edu.neu.mhealth.qutang.towerairdrop.RenderThread mRenderThread -> f
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler mBaseEventHandler -> g
    android.support.v4.view.GestureDetectorCompat mDetector -> h
    java.lang.String TAG -> a
    int nextActorId -> i
    java.util.concurrent.CopyOnWriteArrayList actors -> b
    java.util.ArrayList beforeMainBox -> c
    java.util.ArrayList afterMainBox -> d
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject mainBox -> e
    float PPM -> j
    long spawnDelay -> k
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject test_obj -> l
    org.jbox2d.common.Vec2 screenToWorld(org.jbox2d.common.Vec2) -> a
    org.jbox2d.common.Vec2 worldToScreen(org.jbox2d.common.Vec2) -> b
    float getPPM() -> getPPM
    float getMPP() -> getMPP
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject getMainBox() -> getMainBox
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TriangleObject getParachute() -> getParachute
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject getObjectFromBody(org.jbox2d.dynamics.Body) -> a
    edu.neu.mhealth.qutang.towerairdrop.RenderThread getRenderThread() -> getRenderThread
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject getTestObject() -> getTestObject
    void pullEventHandler(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> a
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void draw(android.graphics.Canvas) -> draw
    void render(android.graphics.Canvas) -> a
    int getNextId() -> getNextId
    void rollBackNextId() -> a
    void resetId() -> b
    void pullDetector(android.support.v4.view.GestureDetectorCompat) -> a
edu.neu.mhealth.qutang.towerairdrop.RenderThread -> edu.neu.mhealth.qutang.towerairdrop.k:
    java.lang.String TAG -> a
    android.view.SurfaceHolder mHolder -> b
    edu.neu.mhealth.qutang.towerairdrop.GameView mView -> c
    boolean isRunning -> d
    void run() -> run
    void setRunning(boolean) -> a
edu.neu.mhealth.qutang.towerairdrop.activities.AboutActivity -> edu.neu.mhealth.qutang.towerairdrop.activities.AboutActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
edu.neu.mhealth.qutang.towerairdrop.activities.AcknowledgeActivity -> edu.neu.mhealth.qutang.towerairdrop.activities.AcknowledgeActivity:
    android.widget.TextView mTxtAck -> a
    void onCreate(android.os.Bundle) -> onCreate
edu.neu.mhealth.qutang.towerairdrop.activities.GameActivity -> edu.neu.mhealth.qutang.towerairdrop.activities.GameActivity:
    java.lang.String TAG -> a
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler baseEventHandler -> b
    android.support.v4.view.GestureDetectorCompat mDetector -> c
    edu.neu.mhealth.qutang.towerairdrop.GameView gameView -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initiate() -> a
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onStop() -> onStop
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onResume() -> onResume
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
edu.neu.mhealth.qutang.towerairdrop.activities.GameActivity$1 -> edu.neu.mhealth.qutang.towerairdrop.activities.a:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$EMERGENCY_TYPE -> a
edu.neu.mhealth.qutang.towerairdrop.activities.GameEntryActivity -> edu.neu.mhealth.qutang.towerairdrop.activities.GameEntryActivity:
    android.widget.ImageButton btnNewGame -> a
    android.widget.ImageButton btnScore -> b
    android.widget.ImageButton btnQuit -> c
    android.widget.ImageButton btnSet -> d
    android.widget.ImageButton btnResume -> e
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPause() -> onPause
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.activities.GameScoreActivity -> edu.neu.mhealth.qutang.towerairdrop.activities.GameScoreActivity:
    android.widget.ImageButton singleHelp -> a
    android.widget.ImageButton lifeHelp -> b
    android.app.Dialog dialog -> c
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void setRankData() -> a
    void onClick(android.view.View) -> onClick
    void okEnablePopDialog(java.lang.String) -> a
    android.app.Dialog access$000(edu.neu.mhealth.qutang.towerairdrop.activities.GameScoreActivity) -> a
edu.neu.mhealth.qutang.towerairdrop.activities.GameScoreActivity$1 -> edu.neu.mhealth.qutang.towerairdrop.activities.b:
    edu.neu.mhealth.qutang.towerairdrop.activities.GameScoreActivity this$0 -> a
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.activities.GameSettingActivity -> edu.neu.mhealth.qutang.towerairdrop.activities.GameSettingActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean getMusic(android.content.Context) -> a
    boolean getVibration(android.content.Context) -> b
    boolean getInstruction(android.content.Context) -> c
    void disableInstruction(android.content.Context) -> d
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler -> edu.neu.mhealth.qutang.towerairdrop.a.a:
    edu.neu.mhealth.qutang.towerairdrop.GameView mGameView -> b
    java.lang.String direction_flag -> c
    org.jbox2d.common.Vec2 actor1Pos -> d
    org.jbox2d.common.Vec2 actor2Pos -> e
    org.jbox2d.common.Vec2 actor3Pos -> f
    int actor1Direction -> g
    int actor2Direction -> h
    int actor3Direction -> i
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject actor1 -> j
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject actor2 -> k
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject actor3 -> l
    java.util.ArrayList tower -> m
    java.util.Random r -> n
    float screenW -> o
    float screenH -> p
    long boxShakeTimer -> q
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObjectPool objPool -> a
    edu.neu.mhealth.qutang.towerairdrop.GameApplication gApplication -> r
    java.util.Timer timer -> s
    android.app.Dialog dialog -> t
    android.app.Dialog quiteDialog -> u
    java.util.TimerTask task -> v
    float initBoxX -> w
    float offsetBoxX -> x
    float towerPosY -> y
    float towerPosX -> z
    void dispatchMessage(android.os.Message) -> dispatchMessage
    void onGameOver(boolean) -> c
    void handleEmergency() -> g
    void onSceneEnding() -> h
    void onNextScene() -> i
    void clearUpScene() -> j
    void onGameRunning() -> k
    void initInitInterface() -> l
    void initShakeInterface() -> m
    void initTiltInterface() -> n
    void initLevel() -> o
    void createBoxCarrier() -> p
    void createMainBox() -> q
    void createParachute() -> r
    void createStackTower(boolean) -> d
    void createWorld() -> s
    void onWorldCreated() -> t
    void onActionReady() -> u
    void pullDirectionFlag(java.lang.String) -> a
    void offerVibration(int) -> a
    void offerVibration() -> a
    void popDialog(java.lang.String,long) -> a
    void popDialog(java.lang.String,int,long) -> a
    void gameOVerPopDialog(java.lang.String,int) -> a
    void okEnablePopDialog(java.lang.String,int,boolean,boolean,edu.neu.mhealth.qutang.towerairdrop.Constants$DIALOG_FROM) -> a
    void instructionOnePopDialog(int,long) -> a
    void instructionTwoPopDialog(int,long) -> b
    void showToast(java.lang.String) -> b
    org.jbox2d.common.Vec2 generateMainPos(boolean) -> e
    int generateDirection(boolean) -> f
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject generateNextLandscape(boolean,java.lang.Float) -> a
    void generateNextObstacle(boolean) -> g
    void generateNextEmergency() -> v
    void makeMainBoxShaking() -> w
    void preventParachuteOverTurn() -> x
    void preventTiltingTooFast() -> y
    void updateTowerStatus() -> z
    void updateParachuteStatus() -> A
    void destroyObjects() -> B
    void onClick(android.content.DialogInterface,int) -> onClick
    void beginContact(org.jbox2d.dynamics.contacts.Contact) -> a
    void endContact(org.jbox2d.dynamics.contacts.Contact) -> b
    void postSolve(org.jbox2d.dynamics.contacts.Contact,org.jbox2d.callbacks.ContactImpulse) -> a
    void preSolve(org.jbox2d.dynamics.contacts.Contact,org.jbox2d.collision.Manifold) -> a
    org.jbox2d.common.Vec2 scaleSpeedOrForces(org.jbox2d.common.Vec2) -> a
    float scaleSpeedOrForces(float,boolean) -> a
    void updateScreenOffset() -> C
    void fixTowerAndGround(boolean) -> h
    void caculateScore() -> b
    void saveGame() -> c
    void loadGame() -> d
    void pauseGame(boolean) -> a
    void resumeGame(boolean) -> b
    void startTimer() -> e
    void closeDialogBackLogic() -> f
    void access$000(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> a
    void access$100(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> b
    void access$200(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> c
    android.app.Dialog access$300(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> d
    edu.neu.mhealth.qutang.towerairdrop.GameView access$400(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> e
    android.app.Dialog access$500(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> f
    java.util.Timer access$600(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> g
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$1 -> edu.neu.mhealth.qutang.towerairdrop.a.b:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void run() -> run
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$10 -> edu.neu.mhealth.qutang.towerairdrop.a.c:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void run() -> run
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$11 -> edu.neu.mhealth.qutang.towerairdrop.a.d:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$GAME_EVENTS -> a
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$EMERGENCY_TYPE -> b
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$2 -> edu.neu.mhealth.qutang.towerairdrop.a.e:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void run() -> run
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$3 -> edu.neu.mhealth.qutang.towerairdrop.a.f:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void run() -> run
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$4 -> edu.neu.mhealth.qutang.towerairdrop.a.g:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$5 -> edu.neu.mhealth.qutang.towerairdrop.a.h:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$6 -> edu.neu.mhealth.qutang.towerairdrop.a.i:
    android.widget.Button val$ok_btn -> a
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> b
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$7 -> edu.neu.mhealth.qutang.towerairdrop.a.j:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$8 -> edu.neu.mhealth.qutang.towerairdrop.a.k:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler$9 -> edu.neu.mhealth.qutang.towerairdrop.a.l:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler this$0 -> a
    void onClick(android.view.View) -> onClick
edu.neu.mhealth.qutang.towerairdrop.physicalengine.BodyQueueDef -> edu.neu.mhealth.qutang.towerairdrop.a.m:
    int actorID -> a
    org.jbox2d.dynamics.BodyDef bd -> b
    int getActorID() -> a
    org.jbox2d.dynamics.BodyDef getBd() -> b
edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics -> edu.neu.mhealth.qutang.towerairdrop.a.n:
    int velIterations -> a
    int posIterations -> b
    org.jbox2d.common.Vec2 gravity -> c
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$PhysicsThread pThread -> d
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler mBaseEventHandler -> e
    java.util.Vector bodyDestroyQ -> f
    java.util.Vector bodyCreateQ -> g
    int bodyCount -> h
    void addCreationQueue(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BodyQueueDef) -> a
    void startPhysicalThread() -> a
    void setGravity(org.jbox2d.common.Vec2) -> a
    void stopPhysicalThread() -> b
    void pausePhysicalThread() -> c
    void resumePhysicalThread() -> d
    void createParachuteJoint(edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject,edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TriangleObject) -> a
    void destroyParachuteJoint() -> e
    org.jbox2d.dynamics.Body destroyPhysicalBody(org.jbox2d.dynamics.Body) -> a
    void pullEventHandler(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> a
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler access$300() -> f
    org.jbox2d.common.Vec2 access$400() -> g
    java.util.Vector access$500() -> h
    int access$600() -> i
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$PhysicsThread access$702(edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$PhysicsThread) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$1 -> edu.neu.mhealth.qutang.towerairdrop.a.o:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$GAME_EVENTS -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$PhysicsThread -> edu.neu.mhealth.qutang.towerairdrop.a.p:
    java.lang.String TAG -> a
    boolean stop -> b
    boolean pause -> c
    int avoidSuspended -> d
    boolean running -> e
    org.jbox2d.dynamics.World physicsWorld -> f
    org.jbox2d.dynamics.joints.RevoluteJoint mainJoint -> g
    void setGravity(org.jbox2d.common.Vec2) -> a
    void update() -> a
    void createParachuteJoint(edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject,edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TriangleObject) -> a
    void destroyParachuteJoint() -> b
    org.jbox2d.dynamics.Body destroyPhysicalBody(org.jbox2d.dynamics.Body) -> a
    void run() -> run
    boolean access$102(edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$PhysicsThread,boolean) -> a
    boolean access$202(edu.neu.mhealth.qutang.towerairdrop.physicalengine.Physics$PhysicsThread,boolean) -> b
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BackgroundObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.a:
    android.graphics.Rect posRect -> a
    android.graphics.RectF headRectF -> b
    android.graphics.drawable.BitmapDrawable mBg -> c
    android.graphics.Paint headPaint -> d
    void setPosition(android.graphics.Rect) -> a
    void setBackground(int) -> a
    void drawBackground(android.graphics.Canvas) -> a
    void drawHeader(android.graphics.Canvas) -> b
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.b:
    java.lang.Integer mColor -> a
    android.graphics.Bitmap mBitmap -> b
    int mAlpha -> c
    boolean visible -> d
    boolean inContact -> e
    boolean fixOnScreen -> f
    int id -> m
    org.jbox2d.common.Vec2 initPos -> n
    float initRotation -> o
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType objectType -> g
    org.jbox2d.dynamics.Body mBody -> h
    float[] mVertices -> i
    float mDensity -> j
    float mFriction -> k
    float mRestitution -> l
    org.jbox2d.dynamics.Body getPhysicalBody() -> a
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType getObjectType() -> b
    void draw(android.graphics.Canvas) -> a
    void setVertices(float[]) -> a
    void createPhysicsBody(float,float,float,org.jbox2d.common.Vec2) -> a
    void destroySelf() -> c
    void onBodyCreation(org.jbox2d.dynamics.Body) -> a
    void setPosition(org.jbox2d.common.Vec2) -> a
    void setColor(int) -> a
    void setBitmap(int) -> b
    void setAlpha(int) -> c
    org.jbox2d.common.Vec2 getPosition() -> d
    org.jbox2d.common.Vec2 getNoOffsetPosition() -> e
    float getRotation() -> f
    int getId() -> g
    void setId() -> h
    void rollBackId() -> i
    void applyForce(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    void setVelocity(org.jbox2d.common.Vec2) -> b
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.c:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$physicalengine$objects$BaseObject$ObjectType -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType -> edu.neu.mhealth.qutang.towerairdrop.a.a.d:
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType MAIN_BOX -> a
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType BOX -> b
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType OBSTACLE -> c
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType LANDSCAPE -> d
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType PARACHUTE -> e
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType BASE -> f
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType[] $VALUES -> g
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType[] values() -> values
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType valueOf(java.lang.String) -> valueOf
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObjectPool -> edu.neu.mhealth.qutang.towerairdrop.a.a.e:
    java.util.Stack mAvailableObstacles -> a
    java.util.Stack mAvailableObstacleBodies -> b
    java.util.Stack mAvailableLandscapes -> c
    java.util.Stack mAvailableLandscapeBodies -> d
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject obtainBaseObject(edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject$ObjectType,float,float) -> a
    void recycleBaseObject(edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObject) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BaseObjectPool$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.f:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$physicalengine$objects$BaseObject$ObjectType -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.g:
    float width -> m
    float height -> n
    float factor -> o
    void onBodyCreation(org.jbox2d.dynamics.Body) -> a
    void refreshVertices() -> l
    void setSize(float,float) -> a
    float getWidth() -> j
    float getHeight() -> k
    boolean addToJoint(org.jbox2d.dynamics.joints.JointDef,org.jbox2d.common.Vec2) -> a
    void draw(android.graphics.Canvas) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.h:
    int[] $SwitchMap$org$jbox2d$dynamics$joints$JointType -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ButtonObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.i:
    android.graphics.RectF posRect -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$BUTTON_TYPE buttonType -> b
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler mBaseEventHandler -> d
    boolean visible -> c
    android.graphics.Bitmap mBitmap -> e
    void draw(android.graphics.Canvas) -> a
    void onClick() -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ButtonObject$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.j:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$BUTTON_TYPE -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.DeadlineObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.k:
    org.jbox2d.common.Vec2 startPos -> b
    org.jbox2d.common.Vec2 endPos -> c
    java.lang.String text -> d
    android.graphics.Paint linePaint -> e
    android.graphics.Paint textPaint -> f
    boolean visible -> a
    void setPosition(float) -> a
    void setText(java.lang.String) -> a
    void draw(android.graphics.Canvas) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.EmergencyObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.l:
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE emergency_type -> d
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject mainBox -> e
    android.graphics.Bitmap lock -> f
    android.graphics.Bitmap unlock -> g
    android.graphics.Bitmap cloud -> h
    android.graphics.Bitmap lightning -> i
    android.graphics.RectF pos1 -> a
    android.graphics.Paint paint1 -> j
    boolean solved -> b
    int counter -> c
    java.util.Random r -> k
    void setMainBox(edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.BoxObject) -> a
    void updateEmergency(edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE) -> a
    edu.neu.mhealth.qutang.towerairdrop.Constants$EMERGENCY_TYPE getType() -> a
    void updateStatus() -> b
    void draw(android.graphics.Canvas) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.EmergencyObject$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.m:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$EMERGENCY_TYPE -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ProgressObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.n:
    android.graphics.RectF posRect -> c
    android.graphics.RectF progressRectF -> d
    android.graphics.RectF picRectF -> e
    float progress -> a
    android.graphics.Bitmap mBitmap -> f
    edu.neu.mhealth.qutang.towerairdrop.Constants$PROGRESS_TYPE progressType -> g
    android.graphics.Paint outPaint -> h
    android.graphics.Paint inPaint -> i
    android.graphics.Paint picPaint -> j
    boolean visible -> b
    void setPosition(android.graphics.RectF) -> a
    void draw(android.graphics.Canvas) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.ProgressObject$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.o:
    int[] $SwitchMap$edu$neu$mhealth$qutang$towerairdrop$Constants$PROGRESS_TYPE -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TextObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.p:
    int left -> e
    int top -> f
    float size -> g
    int color -> a
    android.graphics.Bitmap mBitmap -> h
    android.graphics.RectF picRectF -> i
    android.graphics.Paint textPaint -> j
    android.graphics.Paint picPaint -> k
    java.lang.String text -> b
    android.graphics.Typeface tf -> c
    boolean visible -> d
    void setPosition(int,int,float) -> a
    void setColor(int) -> a
    void draw(android.graphics.Canvas) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TriangleObject -> edu.neu.mhealth.qutang.towerairdrop.a.a.q:
    float length -> m
    void onBodyCreation(org.jbox2d.dynamics.Body) -> a
    void refreshVertices() -> m
    float getLength() -> j
    float getDistanceToVert() -> k
    float getDistanceToSide() -> l
    boolean addToJoint(org.jbox2d.dynamics.joints.JointDef,org.jbox2d.common.Vec2) -> a
    void draw(android.graphics.Canvas) -> a
edu.neu.mhealth.qutang.towerairdrop.physicalengine.objects.TriangleObject$1 -> edu.neu.mhealth.qutang.towerairdrop.a.a.r:
    int[] $SwitchMap$org$jbox2d$dynamics$joints$JointType -> a
edu.neu.mhealth.qutang.towerairdrop.sensors.SensorListener -> edu.neu.mhealth.qutang.towerairdrop.b.a:
    android.hardware.SensorManager sensorManager -> a
    android.hardware.Sensor accSensor -> b
    android.content.Context mContext -> c
    float lastX -> d
    float lastY -> e
    float lastZ -> f
    long lastUpdateTime -> g
    edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler mBaseEventHandler -> h
    float[] accelerometerValues -> i
    edu.neu.mhealth.qutang.towerairdrop.sensors.SensorListener mInstance -> j
    java.util.ArrayList speeds -> k
    boolean isRunning -> l
    edu.neu.mhealth.qutang.towerairdrop.sensors.SensorListener getInstance(android.content.Context) -> a
    void pullEventHandler(edu.neu.mhealth.qutang.towerairdrop.physicalengine.BaseEventHandler) -> a
    void start() -> a
    void stop() -> b
    boolean isRunning() -> c
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void handleShakingInstructionScenario(float[]) -> a
    void handleTiltingScenario(float[]) -> b
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
org.jbox2d.callbacks.ContactFilter -> a.a.a.a:
    boolean shouldCollide(org.jbox2d.dynamics.Fixture,org.jbox2d.dynamics.Fixture) -> a
org.jbox2d.callbacks.ContactImpulse -> a.a.a.b:
    float[] normalImpulses -> a
    float[] tangentImpulses -> b
    int count -> c
org.jbox2d.callbacks.ContactListener -> a.a.a.c:
    void beginContact(org.jbox2d.dynamics.contacts.Contact) -> a
    void endContact(org.jbox2d.dynamics.contacts.Contact) -> b
    void preSolve(org.jbox2d.dynamics.contacts.Contact,org.jbox2d.collision.Manifold) -> a
    void postSolve(org.jbox2d.dynamics.contacts.Contact,org.jbox2d.callbacks.ContactImpulse) -> a
org.jbox2d.callbacks.DebugDraw -> a.a.a.d:
org.jbox2d.callbacks.DestructionListener -> a.a.a.e:
    void sayGoodbye(org.jbox2d.dynamics.joints.Joint) -> a
    void sayGoodbye(org.jbox2d.dynamics.Fixture) -> a
org.jbox2d.callbacks.PairCallback -> a.a.a.f:
    void addPair(java.lang.Object,java.lang.Object) -> a
org.jbox2d.callbacks.QueryCallback -> a.a.a.g:
    boolean reportFixture(org.jbox2d.dynamics.Fixture) -> a
org.jbox2d.callbacks.TreeCallback -> a.a.a.h:
    boolean treeCallback(int) -> a
org.jbox2d.collision.AABB -> a.a.b.a:
    org.jbox2d.common.Vec2 lowerBound -> a
    org.jbox2d.common.Vec2 upperBound -> b
    void combine(org.jbox2d.collision.AABB,org.jbox2d.collision.AABB) -> a
    float getPerimeter() -> a
    boolean testOverlap(org.jbox2d.collision.AABB,org.jbox2d.collision.AABB) -> b
    java.lang.String toString() -> toString
org.jbox2d.collision.Collision -> a.a.b.b:
    org.jbox2d.pooling.IWorldPool pool -> b
    org.jbox2d.collision.DistanceInput input -> c
    org.jbox2d.collision.Distance$SimplexCache cache -> d
    org.jbox2d.collision.DistanceOutput output -> e
    org.jbox2d.common.Vec2 d -> f
    org.jbox2d.common.Vec2 temp -> g
    org.jbox2d.collision.Collision$EdgeResults results1 -> h
    org.jbox2d.collision.Collision$EdgeResults results2 -> i
    org.jbox2d.collision.Collision$ClipVertex[] incidentEdge -> j
    org.jbox2d.common.Vec2 localTangent -> k
    org.jbox2d.common.Vec2 localNormal -> l
    org.jbox2d.common.Vec2 planePoint -> m
    org.jbox2d.common.Vec2 tangent -> n
    org.jbox2d.common.Vec2 v11 -> o
    org.jbox2d.common.Vec2 v12 -> p
    org.jbox2d.collision.Collision$ClipVertex[] clipPoints1 -> q
    org.jbox2d.collision.Collision$ClipVertex[] clipPoints2 -> r
    org.jbox2d.common.Vec2 Q -> s
    org.jbox2d.common.Vec2 e -> t
    org.jbox2d.collision.ContactID cf -> u
    org.jbox2d.common.Vec2 e1 -> v
    org.jbox2d.common.Vec2 P -> w
    org.jbox2d.common.Vec2 n -> x
    org.jbox2d.collision.Collision$EPCollider collider -> y
    boolean $assertionsDisabled -> a
    boolean testOverlap(org.jbox2d.collision.shapes.Shape,int,org.jbox2d.collision.shapes.Shape,int,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
    int clipSegmentToLine(org.jbox2d.collision.Collision$ClipVertex[],org.jbox2d.collision.Collision$ClipVertex[],org.jbox2d.common.Vec2,float,int) -> a
    void collideCircles(org.jbox2d.collision.Manifold,org.jbox2d.collision.shapes.CircleShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.CircleShape,org.jbox2d.common.Transform) -> a
    void collidePolygonAndCircle(org.jbox2d.collision.Manifold,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.CircleShape,org.jbox2d.common.Transform) -> a
    float edgeSeparation(org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform,int,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform) -> a
    void findMaxSeparation(org.jbox2d.collision.Collision$EdgeResults,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform) -> a
    void findIncidentEdge(org.jbox2d.collision.Collision$ClipVertex[],org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform,int,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform) -> a
    void collidePolygons(org.jbox2d.collision.Manifold,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform) -> a
    void collideEdgeAndCircle(org.jbox2d.collision.Manifold,org.jbox2d.collision.shapes.EdgeShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.CircleShape,org.jbox2d.common.Transform) -> a
    void collideEdgeAndPolygon(org.jbox2d.collision.Manifold,org.jbox2d.collision.shapes.EdgeShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform) -> a
org.jbox2d.collision.Collision$1 -> a.a.b.c:
org.jbox2d.collision.Collision$ClipVertex -> a.a.b.d:
    org.jbox2d.common.Vec2 v -> a
    org.jbox2d.collision.ContactID id -> b
    void set(org.jbox2d.collision.Collision$ClipVertex) -> a
org.jbox2d.collision.Collision$EPAxis -> a.a.b.e:
    org.jbox2d.collision.Collision$EPAxis$Type type -> a
    int index -> b
    float separation -> c
org.jbox2d.collision.Collision$EPAxis$Type -> a.a.b.f:
    org.jbox2d.collision.Collision$EPAxis$Type UNKNOWN -> a
    org.jbox2d.collision.Collision$EPAxis$Type EDGE_A -> b
    org.jbox2d.collision.Collision$EPAxis$Type EDGE_B -> c
    org.jbox2d.collision.Collision$EPAxis$Type[] $VALUES -> d
    org.jbox2d.collision.Collision$EPAxis$Type[] values() -> values
    org.jbox2d.collision.Collision$EPAxis$Type valueOf(java.lang.String) -> valueOf
org.jbox2d.collision.Collision$EPCollider -> a.a.b.g:
    org.jbox2d.collision.Collision$TempPolygon m_polygonB -> a
    org.jbox2d.common.Transform m_xf -> b
    org.jbox2d.common.Vec2 m_centroidB -> c
    org.jbox2d.common.Vec2 m_v0 -> d
    org.jbox2d.common.Vec2 m_v1 -> e
    org.jbox2d.common.Vec2 m_v2 -> f
    org.jbox2d.common.Vec2 m_v3 -> g
    org.jbox2d.common.Vec2 m_normal0 -> h
    org.jbox2d.common.Vec2 m_normal1 -> i
    org.jbox2d.common.Vec2 m_normal2 -> j
    org.jbox2d.common.Vec2 m_normal -> k
    org.jbox2d.common.Vec2 m_lowerLimit -> l
    org.jbox2d.common.Vec2 m_upperLimit -> m
    float m_radius -> n
    boolean m_front -> o
    org.jbox2d.common.Vec2 edge1 -> p
    org.jbox2d.common.Vec2 temp -> q
    org.jbox2d.common.Vec2 edge0 -> r
    org.jbox2d.common.Vec2 edge2 -> s
    org.jbox2d.collision.Collision$ClipVertex[] ie -> t
    org.jbox2d.collision.Collision$ClipVertex[] clipPoints1 -> u
    org.jbox2d.collision.Collision$ClipVertex[] clipPoints2 -> v
    org.jbox2d.collision.Collision$ReferenceFace rf -> w
    org.jbox2d.collision.Collision$EPAxis edgeAxis -> x
    org.jbox2d.collision.Collision$EPAxis polygonAxis -> y
    org.jbox2d.common.Vec2 perp -> z
    org.jbox2d.common.Vec2 n -> A
    void collide(org.jbox2d.collision.Manifold,org.jbox2d.collision.shapes.EdgeShape,org.jbox2d.common.Transform,org.jbox2d.collision.shapes.PolygonShape,org.jbox2d.common.Transform) -> a
    void computeEdgeSeparation(org.jbox2d.collision.Collision$EPAxis) -> a
    void computePolygonSeparation(org.jbox2d.collision.Collision$EPAxis) -> b
org.jbox2d.collision.Collision$EdgeResults -> a.a.b.h:
    float separation -> a
    int edgeIndex -> b
org.jbox2d.collision.Collision$ReferenceFace -> a.a.b.i:
    int i1 -> a
    int i2 -> b
    org.jbox2d.common.Vec2 v1 -> c
    org.jbox2d.common.Vec2 v2 -> d
    org.jbox2d.common.Vec2 normal -> e
    org.jbox2d.common.Vec2 sideNormal1 -> f
    float sideOffset1 -> g
    org.jbox2d.common.Vec2 sideNormal2 -> h
    float sideOffset2 -> i
org.jbox2d.collision.Collision$TempPolygon -> a.a.b.j:
    org.jbox2d.common.Vec2[] vertices -> a
    org.jbox2d.common.Vec2[] normals -> b
    int count -> c
org.jbox2d.collision.ContactID -> a.a.b.k:
    byte indexA -> a
    byte indexB -> b
    byte typeA -> c
    byte typeB -> d
    int getKey() -> a
    boolean isEqual(org.jbox2d.collision.ContactID) -> a
    void set(org.jbox2d.collision.ContactID) -> b
    void flip() -> b
    void zero() -> c
    int compareTo(org.jbox2d.collision.ContactID) -> c
    int compareTo(java.lang.Object) -> compareTo
org.jbox2d.collision.ContactID$Type -> a.a.b.l:
    org.jbox2d.collision.ContactID$Type VERTEX -> a
    org.jbox2d.collision.ContactID$Type FACE -> b
    org.jbox2d.collision.ContactID$Type[] $VALUES -> c
    org.jbox2d.collision.ContactID$Type[] values() -> values
    org.jbox2d.collision.ContactID$Type valueOf(java.lang.String) -> valueOf
org.jbox2d.collision.Distance -> a.a.b.m:
    int GJK_CALLS -> a
    int GJK_ITERS -> b
    int GJK_MAX_ITERS -> c
    org.jbox2d.collision.Distance$Simplex simplex -> e
    int[] saveA -> f
    int[] saveB -> g
    org.jbox2d.common.Vec2 closestPoint -> h
    org.jbox2d.common.Vec2 d -> i
    org.jbox2d.common.Vec2 temp -> j
    org.jbox2d.common.Vec2 normal -> k
    boolean $assertionsDisabled -> d
    void distance(org.jbox2d.collision.DistanceOutput,org.jbox2d.collision.Distance$SimplexCache,org.jbox2d.collision.DistanceInput) -> a
org.jbox2d.collision.Distance$1 -> a.a.b.n:
    int[] $SwitchMap$org$jbox2d$collision$shapes$ShapeType -> a
org.jbox2d.collision.Distance$DistanceProxy -> a.a.b.o:
    org.jbox2d.common.Vec2[] m_vertices -> a
    int m_count -> b
    float m_radius -> c
    org.jbox2d.common.Vec2[] m_buffer -> d
    boolean $assertionsDisabled -> e
    void set(org.jbox2d.collision.shapes.Shape,int) -> a
    int getSupport(org.jbox2d.common.Vec2) -> a
    org.jbox2d.common.Vec2 getVertex(int) -> a
org.jbox2d.collision.Distance$Simplex -> a.a.b.p:
    org.jbox2d.collision.Distance$SimplexVertex m_v1 -> a
    org.jbox2d.collision.Distance$SimplexVertex m_v2 -> b
    org.jbox2d.collision.Distance$SimplexVertex m_v3 -> c
    org.jbox2d.collision.Distance$SimplexVertex[] vertices -> d
    int m_count -> e
    org.jbox2d.common.Vec2 e12 -> h
    org.jbox2d.common.Vec2 case2 -> i
    org.jbox2d.common.Vec2 case22 -> j
    org.jbox2d.common.Vec2 case3 -> k
    org.jbox2d.common.Vec2 case33 -> l
    org.jbox2d.common.Vec2 e13 -> m
    org.jbox2d.common.Vec2 e23 -> n
    org.jbox2d.common.Vec2 w1 -> o
    org.jbox2d.common.Vec2 w2 -> p
    org.jbox2d.common.Vec2 w3 -> q
    boolean $assertionsDisabled -> f
    org.jbox2d.collision.Distance this$0 -> g
    void readCache(org.jbox2d.collision.Distance$SimplexCache,org.jbox2d.collision.Distance$DistanceProxy,org.jbox2d.common.Transform,org.jbox2d.collision.Distance$DistanceProxy,org.jbox2d.common.Transform) -> a
    void writeCache(org.jbox2d.collision.Distance$SimplexCache) -> a
    void getSearchDirection(org.jbox2d.common.Vec2) -> a
    void getClosestPoint(org.jbox2d.common.Vec2) -> b
    void getWitnessPoints(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    float getMetric() -> a
    void solve2() -> b
    void solve3() -> c
org.jbox2d.collision.Distance$SimplexCache -> a.a.b.q:
    float metric -> a
    int count -> b
    int[] indexA -> c
    int[] indexB -> d
org.jbox2d.collision.Distance$SimplexVertex -> a.a.b.r:
    org.jbox2d.common.Vec2 wA -> a
    org.jbox2d.common.Vec2 wB -> b
    org.jbox2d.common.Vec2 w -> c
    float a -> d
    int indexA -> e
    int indexB -> f
    org.jbox2d.collision.Distance this$0 -> g
    void set(org.jbox2d.collision.Distance$SimplexVertex) -> a
org.jbox2d.collision.DistanceInput -> a.a.b.s:
    org.jbox2d.collision.Distance$DistanceProxy proxyA -> a
    org.jbox2d.collision.Distance$DistanceProxy proxyB -> b
    org.jbox2d.common.Transform transformA -> c
    org.jbox2d.common.Transform transformB -> d
    boolean useRadii -> e
org.jbox2d.collision.DistanceOutput -> a.a.b.t:
    org.jbox2d.common.Vec2 pointA -> a
    org.jbox2d.common.Vec2 pointB -> b
    float distance -> c
    int iterations -> d
org.jbox2d.collision.Manifold -> a.a.b.u:
    org.jbox2d.collision.ManifoldPoint[] points -> a
    org.jbox2d.common.Vec2 localNormal -> b
    org.jbox2d.common.Vec2 localPoint -> c
    org.jbox2d.collision.Manifold$ManifoldType type -> d
    int pointCount -> e
    void set(org.jbox2d.collision.Manifold) -> a
org.jbox2d.collision.Manifold$ManifoldType -> a.a.b.v:
    org.jbox2d.collision.Manifold$ManifoldType CIRCLES -> a
    org.jbox2d.collision.Manifold$ManifoldType FACE_A -> b
    org.jbox2d.collision.Manifold$ManifoldType FACE_B -> c
    org.jbox2d.collision.Manifold$ManifoldType[] $VALUES -> d
    org.jbox2d.collision.Manifold$ManifoldType[] values() -> values
    org.jbox2d.collision.Manifold$ManifoldType valueOf(java.lang.String) -> valueOf
org.jbox2d.collision.ManifoldPoint -> a.a.b.w:
    org.jbox2d.common.Vec2 localPoint -> a
    float normalImpulse -> b
    float tangentImpulse -> c
    org.jbox2d.collision.ContactID id -> d
    void set(org.jbox2d.collision.ManifoldPoint) -> a
org.jbox2d.collision.RayCastInput -> a.a.b.x:
    org.jbox2d.common.Vec2 p1 -> a
    org.jbox2d.common.Vec2 p2 -> b
    float maxFraction -> c
org.jbox2d.collision.RayCastOutput -> a.a.b.y:
    org.jbox2d.common.Vec2 normal -> a
    float fraction -> b
org.jbox2d.collision.SeparationFunction -> a.a.b.z:
    org.jbox2d.collision.Distance$DistanceProxy m_proxyA -> a
    org.jbox2d.collision.Distance$DistanceProxy m_proxyB -> b
    org.jbox2d.collision.Type m_type -> c
    org.jbox2d.common.Vec2 m_localPoint -> d
    org.jbox2d.common.Vec2 m_axis -> e
    org.jbox2d.common.Sweep m_sweepA -> f
    org.jbox2d.common.Sweep m_sweepB -> g
    org.jbox2d.common.Vec2 localPointA -> i
    org.jbox2d.common.Vec2 localPointB -> j
    org.jbox2d.common.Vec2 pointA -> k
    org.jbox2d.common.Vec2 pointB -> l
    org.jbox2d.common.Vec2 localPointA1 -> m
    org.jbox2d.common.Vec2 localPointA2 -> n
    org.jbox2d.common.Vec2 normal -> o
    org.jbox2d.common.Vec2 localPointB1 -> p
    org.jbox2d.common.Vec2 localPointB2 -> q
    org.jbox2d.common.Vec2 temp -> r
    org.jbox2d.common.Transform xfa -> s
    org.jbox2d.common.Transform xfb -> t
    org.jbox2d.common.Vec2 axisA -> u
    org.jbox2d.common.Vec2 axisB -> v
    boolean $assertionsDisabled -> h
    float initialize(org.jbox2d.collision.Distance$SimplexCache,org.jbox2d.collision.Distance$DistanceProxy,org.jbox2d.common.Sweep,org.jbox2d.collision.Distance$DistanceProxy,org.jbox2d.common.Sweep,float) -> a
    float findMinSeparation(int[],float) -> a
    float evaluate(int,int,float) -> a
org.jbox2d.collision.SeparationFunction$1 -> a.a.b.aa:
    int[] $SwitchMap$org$jbox2d$collision$Type -> a
org.jbox2d.collision.TimeOfImpact -> a.a.b.ab:
    int toiCalls -> a
    int toiIters -> b
    int toiMaxIters -> c
    int toiRootIters -> d
    int toiMaxRootIters -> e
    org.jbox2d.collision.Distance$SimplexCache cache -> g
    org.jbox2d.collision.DistanceInput distanceInput -> h
    org.jbox2d.common.Transform xfA -> i
    org.jbox2d.common.Transform xfB -> j
    org.jbox2d.collision.DistanceOutput distanceOutput -> k
    org.jbox2d.collision.SeparationFunction fcn -> l
    int[] indexes -> m
    org.jbox2d.common.Sweep sweepA -> n
    org.jbox2d.common.Sweep sweepB -> o
    org.jbox2d.pooling.IWorldPool pool -> p
    boolean $assertionsDisabled -> f
    void timeOfImpact(org.jbox2d.collision.TimeOfImpact$TOIOutput,org.jbox2d.collision.TimeOfImpact$TOIInput) -> a
org.jbox2d.collision.TimeOfImpact$TOIInput -> a.a.b.ac:
    org.jbox2d.collision.Distance$DistanceProxy proxyA -> a
    org.jbox2d.collision.Distance$DistanceProxy proxyB -> b
    org.jbox2d.common.Sweep sweepA -> c
    org.jbox2d.common.Sweep sweepB -> d
    float tMax -> e
org.jbox2d.collision.TimeOfImpact$TOIOutput -> a.a.b.ad:
    org.jbox2d.collision.TimeOfImpact$TOIOutputState state -> a
    float t -> b
org.jbox2d.collision.TimeOfImpact$TOIOutputState -> a.a.b.ae:
    org.jbox2d.collision.TimeOfImpact$TOIOutputState UNKNOWN -> a
    org.jbox2d.collision.TimeOfImpact$TOIOutputState FAILED -> b
    org.jbox2d.collision.TimeOfImpact$TOIOutputState OVERLAPPED -> c
    org.jbox2d.collision.TimeOfImpact$TOIOutputState TOUCHING -> d
    org.jbox2d.collision.TimeOfImpact$TOIOutputState SEPARATED -> e
    org.jbox2d.collision.TimeOfImpact$TOIOutputState[] $VALUES -> f
    org.jbox2d.collision.TimeOfImpact$TOIOutputState[] values() -> values
    org.jbox2d.collision.TimeOfImpact$TOIOutputState valueOf(java.lang.String) -> valueOf
org.jbox2d.collision.Type -> a.a.b.af:
    org.jbox2d.collision.Type POINTS -> a
    org.jbox2d.collision.Type FACE_A -> b
    org.jbox2d.collision.Type FACE_B -> c
    org.jbox2d.collision.Type[] $VALUES -> d
    org.jbox2d.collision.Type[] values() -> values
    org.jbox2d.collision.Type valueOf(java.lang.String) -> valueOf
org.jbox2d.collision.WorldManifold -> a.a.b.ag:
    org.jbox2d.common.Vec2 normal -> a
    org.jbox2d.common.Vec2[] points -> b
    org.jbox2d.common.Vec2 pool3 -> c
    org.jbox2d.common.Vec2 pool4 -> d
    void initialize(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,float,org.jbox2d.common.Transform,float) -> a
org.jbox2d.collision.WorldManifold$1 -> a.a.b.ah:
    int[] $SwitchMap$org$jbox2d$collision$Manifold$ManifoldType -> a
org.jbox2d.collision.broadphase.BroadPhase -> a.a.b.a.a:
    org.jbox2d.collision.broadphase.BroadPhaseStrategy m_tree -> a
    int m_proxyCount -> b
    int[] m_moveBuffer -> c
    int m_moveCapacity -> d
    int m_moveCount -> e
    org.jbox2d.collision.broadphase.Pair[] m_pairBuffer -> f
    int m_pairCapacity -> g
    int m_pairCount -> h
    int m_queryProxyId -> i
    int createProxy(org.jbox2d.collision.AABB,java.lang.Object) -> a
    void destroyProxy(int) -> b
    void moveProxy(int,org.jbox2d.collision.AABB,org.jbox2d.common.Vec2) -> a
    java.lang.Object getUserData(int) -> c
    boolean testOverlap(int,int) -> a
    void updatePairs(org.jbox2d.callbacks.PairCallback) -> a
    void bufferMove(int) -> d
    void unbufferMove(int) -> e
    boolean treeCallback(int) -> a
org.jbox2d.collision.broadphase.BroadPhaseStrategy -> a.a.b.a.b:
    int createProxy(org.jbox2d.collision.AABB,java.lang.Object) -> a
    void destroyProxy(int) -> a
    boolean moveProxy(int,org.jbox2d.collision.AABB,org.jbox2d.common.Vec2) -> a
    java.lang.Object getUserData(int) -> b
    org.jbox2d.collision.AABB getFatAABB(int) -> c
    void query(org.jbox2d.callbacks.TreeCallback,org.jbox2d.collision.AABB) -> a
org.jbox2d.collision.broadphase.DynamicTree -> a.a.b.a.c:
    org.jbox2d.collision.broadphase.DynamicTreeNode m_root -> b
    org.jbox2d.collision.broadphase.DynamicTreeNode[] m_nodes -> c
    int m_nodeCount -> d
    int m_nodeCapacity -> e
    int m_freeList -> f
    int m_insertionCount -> g
    org.jbox2d.common.Vec2[] drawVecs -> h
    org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack nodeStack -> i
    org.jbox2d.common.Vec2 r -> j
    org.jbox2d.collision.AABB aabb -> k
    org.jbox2d.collision.RayCastInput subInput -> l
    org.jbox2d.collision.AABB combinedAABB -> m
    org.jbox2d.common.Color3f color -> n
    org.jbox2d.common.Vec2 textVec -> o
    boolean $assertionsDisabled -> a
    int createProxy(org.jbox2d.collision.AABB,java.lang.Object) -> a
    void destroyProxy(int) -> a
    boolean moveProxy(int,org.jbox2d.collision.AABB,org.jbox2d.common.Vec2) -> a
    java.lang.Object getUserData(int) -> b
    org.jbox2d.collision.AABB getFatAABB(int) -> c
    void query(org.jbox2d.callbacks.TreeCallback,org.jbox2d.collision.AABB) -> a
    org.jbox2d.collision.broadphase.DynamicTreeNode allocateNode() -> a
    void freeNode(org.jbox2d.collision.broadphase.DynamicTreeNode) -> a
    void insertLeaf(int) -> d
    void removeLeaf(org.jbox2d.collision.broadphase.DynamicTreeNode) -> b
    org.jbox2d.collision.broadphase.DynamicTreeNode balance(org.jbox2d.collision.broadphase.DynamicTreeNode) -> c
org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack -> a.a.b.a.d:
    org.jbox2d.collision.broadphase.DynamicTreeNode[] stack -> c
    int size -> d
    int position -> e
    boolean $assertionsDisabled -> a
    org.jbox2d.collision.broadphase.DynamicTree this$0 -> b
    void reset() -> a
    org.jbox2d.collision.broadphase.DynamicTreeNode pop() -> b
    void push(org.jbox2d.collision.broadphase.DynamicTreeNode) -> a
    int getCount() -> c
org.jbox2d.collision.broadphase.DynamicTreeNode -> a.a.b.a.e:
    org.jbox2d.collision.AABB aabb -> a
    java.lang.Object userData -> b
    org.jbox2d.collision.broadphase.DynamicTreeNode parent -> c
    org.jbox2d.collision.broadphase.DynamicTreeNode child1 -> d
    org.jbox2d.collision.broadphase.DynamicTreeNode child2 -> e
    int id -> f
    int height -> g
    boolean isLeaf() -> a
org.jbox2d.collision.broadphase.Pair -> a.a.b.a.f:
    int proxyIdA -> a
    int proxyIdB -> b
    int compareTo(org.jbox2d.collision.broadphase.Pair) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jbox2d.collision.shapes.ChainShape -> a.a.b.b.a:
    org.jbox2d.common.Vec2[] m_vertices -> a
    int m_count -> b
    org.jbox2d.common.Vec2 m_prevVertex -> c
    org.jbox2d.common.Vec2 m_nextVertex -> d
    boolean m_hasPrevVertex -> e
    boolean m_hasNextVertex -> f
    org.jbox2d.collision.shapes.EdgeShape pool0 -> j
    boolean $assertionsDisabled -> g
    int getChildCount() -> a
    void getChildEdge(org.jbox2d.collision.shapes.EdgeShape,int) -> a
    void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int) -> a
    void computeMass(org.jbox2d.collision.shapes.MassData,float) -> a
    org.jbox2d.collision.shapes.Shape clone() -> b
    void createChain(org.jbox2d.common.Vec2[],int) -> a
    java.lang.Object clone() -> clone
org.jbox2d.collision.shapes.CircleShape -> a.a.b.b.b:
    org.jbox2d.common.Vec2 m_p -> a
    boolean $assertionsDisabled -> b
    org.jbox2d.collision.shapes.Shape clone() -> b
    int getChildCount() -> a
    void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int) -> a
    void computeMass(org.jbox2d.collision.shapes.MassData,float) -> a
    java.lang.Object clone() -> clone
org.jbox2d.collision.shapes.EdgeShape -> a.a.b.b.c:
    org.jbox2d.common.Vec2 m_vertex1 -> a
    org.jbox2d.common.Vec2 m_vertex2 -> b
    org.jbox2d.common.Vec2 m_vertex0 -> c
    org.jbox2d.common.Vec2 m_vertex3 -> d
    boolean m_hasVertex0 -> e
    boolean m_hasVertex3 -> f
    org.jbox2d.common.Vec2 normal -> g
    int getChildCount() -> a
    void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int) -> a
    void computeMass(org.jbox2d.collision.shapes.MassData,float) -> a
    org.jbox2d.collision.shapes.Shape clone() -> b
    java.lang.Object clone() -> clone
org.jbox2d.collision.shapes.MassData -> a.a.b.b.d:
    float mass -> a
    org.jbox2d.common.Vec2 center -> b
    float I -> c
    org.jbox2d.collision.shapes.MassData clone() -> a
    java.lang.Object clone() -> clone
org.jbox2d.collision.shapes.PolygonShape -> a.a.b.b.e:
    org.jbox2d.common.Vec2 m_centroid -> a
    org.jbox2d.common.Vec2[] m_vertices -> b
    org.jbox2d.common.Vec2[] m_normals -> c
    int m_count -> d
    org.jbox2d.common.Vec2 pool1 -> f
    org.jbox2d.common.Vec2 pool2 -> g
    org.jbox2d.common.Vec2 pool3 -> j
    org.jbox2d.common.Vec2 pool4 -> k
    org.jbox2d.common.Transform poolt1 -> l
    boolean $assertionsDisabled -> e
    org.jbox2d.collision.shapes.Shape clone() -> b
    void set(org.jbox2d.common.Vec2[],int) -> a
    void set(org.jbox2d.common.Vec2[],int,org.jbox2d.pooling.arrays.Vec2Array,org.jbox2d.pooling.arrays.IntArray) -> a
    void setAsBox(float,float) -> a
    int getChildCount() -> a
    void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int) -> a
    void computeCentroidToOut(org.jbox2d.common.Vec2[],int,org.jbox2d.common.Vec2) -> a
    void computeMass(org.jbox2d.collision.shapes.MassData,float) -> a
    java.lang.Object clone() -> clone
org.jbox2d.collision.shapes.Shape -> a.a.b.b.f:
    org.jbox2d.collision.shapes.ShapeType m_type -> h
    float m_radius -> i
    org.jbox2d.collision.shapes.ShapeType getType() -> c
    float getRadius() -> d
    void setRadius(float) -> a
    int getChildCount() -> a
    void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int) -> a
    void computeMass(org.jbox2d.collision.shapes.MassData,float) -> a
    org.jbox2d.collision.shapes.Shape clone() -> b
    java.lang.Object clone() -> clone
org.jbox2d.collision.shapes.ShapeType -> a.a.b.b.g:
    org.jbox2d.collision.shapes.ShapeType CIRCLE -> a
    org.jbox2d.collision.shapes.ShapeType EDGE -> b
    org.jbox2d.collision.shapes.ShapeType POLYGON -> c
    org.jbox2d.collision.shapes.ShapeType CHAIN -> d
    org.jbox2d.collision.shapes.ShapeType[] $VALUES -> e
    org.jbox2d.collision.shapes.ShapeType[] values() -> values
    org.jbox2d.collision.shapes.ShapeType valueOf(java.lang.String) -> valueOf
org.jbox2d.common.Color3f -> a.a.c.a:
    org.jbox2d.common.Color3f WHITE -> a
    org.jbox2d.common.Color3f BLACK -> b
    org.jbox2d.common.Color3f BLUE -> c
    org.jbox2d.common.Color3f GREEN -> d
    org.jbox2d.common.Color3f RED -> e
    float x -> f
    float y -> g
    float z -> h
org.jbox2d.common.Mat22 -> a.a.c.b:
    org.jbox2d.common.Vec2 ex -> a
    org.jbox2d.common.Vec2 ey -> b
    boolean $assertionsDisabled -> c
    java.lang.String toString() -> toString
    org.jbox2d.common.Mat22 clone() -> a
    void setZero() -> b
    void invertToOut(org.jbox2d.common.Mat22) -> a
    void solveToOut(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    void mulToOutUnsafe(org.jbox2d.common.Mat22,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
org.jbox2d.common.Mat33 -> a.a.c.c:
    org.jbox2d.common.Mat33 IDENTITY -> a
    org.jbox2d.common.Vec3 ex -> b
    org.jbox2d.common.Vec3 ey -> c
    org.jbox2d.common.Vec3 ez -> d
    boolean $assertionsDisabled -> e
    void mul22ToOutUnsafe(org.jbox2d.common.Mat33,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    void mulToOutUnsafe(org.jbox2d.common.Mat33,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3) -> a
    void solve22ToOut(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    void solve33ToOut(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3) -> a
    void getInverse22(org.jbox2d.common.Mat33) -> a
    void getSymInverse33(org.jbox2d.common.Mat33) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.jbox2d.common.MathUtils -> a.a.c.d:
    float[] sinLUT -> a
    float sin(float) -> a
    float sinLUT(float) -> b
    float cos(float) -> c
    float abs(float) -> d
    int floor(float) -> e
    int round(float) -> f
    float max(float,float) -> a
    int max(int,int) -> a
    float min(float,float) -> b
    int min(int,int) -> b
    float clamp(float,float,float) -> a
    float sqrt(float) -> g
    float distanceSquared(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    float distance(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> b
org.jbox2d.common.PlatformMathUtils -> a.a.c.e:
org.jbox2d.common.Rot -> a.a.c.f:
    float s -> a
    float c -> b
    boolean $assertionsDisabled -> c
    java.lang.String toString() -> toString
    org.jbox2d.common.Rot set(float) -> a
    org.jbox2d.common.Rot set(org.jbox2d.common.Rot) -> a
    org.jbox2d.common.Rot setIdentity() -> a
    org.jbox2d.common.Rot clone() -> b
    void mulTransUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot) -> a
    void mulToOut(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    void mulToOutUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> b
    void mulTransUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> c
    java.lang.Object clone() -> clone
org.jbox2d.common.Settings -> a.a.c.g:
    boolean FAST_ABS -> a
    boolean FAST_FLOOR -> b
    boolean FAST_CEIL -> c
    boolean FAST_ROUND -> d
    boolean FAST_ATAN2 -> e
    int CONTACT_STACK_INIT_SIZE -> f
    boolean SINCOS_LUT_ENABLED -> g
    int SINCOS_LUT_LENGTH -> h
    boolean SINCOS_LUT_LERP -> i
    float maxRotationSquared -> j
org.jbox2d.common.Sweep -> a.a.c.h:
    org.jbox2d.common.Vec2 localCenter -> a
    org.jbox2d.common.Vec2 c0 -> b
    org.jbox2d.common.Vec2 c -> c
    float a0 -> d
    float a -> e
    float alpha0 -> f
    boolean $assertionsDisabled -> g
    java.lang.String toString() -> toString
    void normalize() -> a
    org.jbox2d.common.Sweep set(org.jbox2d.common.Sweep) -> a
    void getTransform(org.jbox2d.common.Transform,float) -> a
    void advance(float) -> a
org.jbox2d.common.Timer -> a.a.c.i:
    long resetNanos -> a
    void reset() -> a
    float getMilliseconds() -> b
org.jbox2d.common.Transform -> a.a.c.j:
    org.jbox2d.common.Vec2 p -> a
    org.jbox2d.common.Rot q -> b
    org.jbox2d.common.Vec2 pool -> d
    boolean $assertionsDisabled -> c
    org.jbox2d.common.Transform set(org.jbox2d.common.Transform) -> a
    void mulToOut(org.jbox2d.common.Transform,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    void mulToOutUnsafe(org.jbox2d.common.Transform,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> b
    void mulTransToOut(org.jbox2d.common.Transform,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> c
    void mulTransToOutUnsafe(org.jbox2d.common.Transform,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> d
    void mulTransToOutUnsafe(org.jbox2d.common.Transform,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
    java.lang.String toString() -> toString
org.jbox2d.common.Vec2 -> a.a.c.k:
    float x -> a
    float y -> b
    boolean $assertionsDisabled -> c
    void setZero() -> a
    org.jbox2d.common.Vec2 set(float,float) -> a
    org.jbox2d.common.Vec2 set(org.jbox2d.common.Vec2) -> a
    org.jbox2d.common.Vec2 sub(org.jbox2d.common.Vec2) -> b
    org.jbox2d.common.Vec2 negateLocal() -> b
    org.jbox2d.common.Vec2 addLocal(org.jbox2d.common.Vec2) -> c
    org.jbox2d.common.Vec2 addLocal(float,float) -> b
    org.jbox2d.common.Vec2 subLocal(org.jbox2d.common.Vec2) -> d
    org.jbox2d.common.Vec2 mulLocal(float) -> a
    float length() -> c
    float lengthSquared() -> d
    float normalize() -> e
    boolean isValid() -> f
    org.jbox2d.common.Vec2 clone() -> g
    java.lang.String toString() -> toString
    float dot(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    float cross(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> b
    void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2) -> a
    void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
org.jbox2d.common.Vec3 -> a.a.c.l:
    float x -> a
    float y -> b
    float z -> c
    boolean $assertionsDisabled -> d
    org.jbox2d.common.Vec3 set(org.jbox2d.common.Vec3) -> a
    org.jbox2d.common.Vec3 set(float,float,float) -> a
    org.jbox2d.common.Vec3 addLocal(org.jbox2d.common.Vec3) -> b
    org.jbox2d.common.Vec3 subLocal(org.jbox2d.common.Vec3) -> c
    org.jbox2d.common.Vec3 mulLocal(float) -> a
    org.jbox2d.common.Vec3 negateLocal() -> a
    void setZero() -> b
    org.jbox2d.common.Vec3 clone() -> c
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    float dot(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3) -> a
    void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3) -> a
    java.lang.Object clone() -> clone
org.jbox2d.dynamics.Body -> a.a.d.a:
    org.jbox2d.dynamics.BodyType m_type -> a
    int m_flags -> b
    int m_islandIndex -> c
    org.jbox2d.common.Transform m_xf -> d
    org.jbox2d.common.Sweep m_sweep -> e
    org.jbox2d.common.Vec2 m_linearVelocity -> f
    float m_angularVelocity -> g
    org.jbox2d.common.Vec2 m_force -> h
    float m_torque -> i
    org.jbox2d.dynamics.World m_world -> j
    org.jbox2d.dynamics.Body m_prev -> k
    org.jbox2d.dynamics.Body m_next -> l
    org.jbox2d.dynamics.Fixture m_fixtureList -> m
    int m_fixtureCount -> n
    org.jbox2d.dynamics.joints.JointEdge m_jointList -> o
    org.jbox2d.dynamics.contacts.ContactEdge m_contactList -> p
    float m_mass -> q
    float m_invMass -> r
    float m_I -> s
    float m_invI -> t
    float m_linearDamping -> u
    float m_angularDamping -> v
    float m_gravityScale -> w
    float m_sleepTime -> x
    java.lang.Object m_userData -> y
    org.jbox2d.dynamics.FixtureDef fixDef -> A
    org.jbox2d.collision.shapes.MassData pmd -> B
    org.jbox2d.common.Transform pxf -> C
    boolean $assertionsDisabled -> z
    org.jbox2d.dynamics.Fixture createFixture(org.jbox2d.dynamics.FixtureDef) -> a
    void setTransform(org.jbox2d.common.Vec2,float) -> a
    org.jbox2d.common.Transform getTransform() -> a
    org.jbox2d.common.Vec2 getPosition() -> b
    float getAngle() -> c
    org.jbox2d.common.Vec2 getWorldCenter() -> d
    void setLinearVelocity(org.jbox2d.common.Vec2) -> a
    org.jbox2d.common.Vec2 getLinearVelocity() -> e
    void setAngularVelocity(float) -> a
    void applyForce(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
    float getMass() -> f
    void resetMassData() -> g
    org.jbox2d.common.Vec2 getWorldPoint(org.jbox2d.common.Vec2) -> b
    void getWorldPointToOut(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> b
    org.jbox2d.common.Vec2 getLocalPoint(org.jbox2d.common.Vec2) -> c
    void getLocalPointToOut(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> c
    org.jbox2d.dynamics.BodyType getType() -> h
    boolean isBullet() -> i
    void setAwake(boolean) -> a
    boolean isAwake() -> j
    boolean isActive() -> k
    org.jbox2d.dynamics.contacts.ContactEdge getContactList() -> l
    org.jbox2d.dynamics.Body getNext() -> m
    java.lang.Object getUserData() -> n
    void setUserData(java.lang.Object) -> a
    void synchronizeFixtures() -> o
    void synchronizeTransform() -> p
    boolean shouldCollide(org.jbox2d.dynamics.Body) -> a
    void advance(float) -> b
org.jbox2d.dynamics.BodyDef -> a.a.d.b:
    org.jbox2d.dynamics.BodyType type -> a
    java.lang.Object userData -> b
    org.jbox2d.common.Vec2 position -> c
    float angle -> d
    org.jbox2d.common.Vec2 linearVelocity -> e
    float angularVelocity -> f
    float linearDamping -> g
    float angularDamping -> h
    boolean allowSleep -> i
    boolean awake -> j
    boolean fixedRotation -> k
    boolean bullet -> l
    boolean active -> m
    float gravityScale -> n
org.jbox2d.dynamics.BodyType -> a.a.d.c:
    org.jbox2d.dynamics.BodyType STATIC -> a
    org.jbox2d.dynamics.BodyType KINEMATIC -> b
    org.jbox2d.dynamics.BodyType DYNAMIC -> c
    org.jbox2d.dynamics.BodyType[] $VALUES -> d
    org.jbox2d.dynamics.BodyType[] values() -> values
    org.jbox2d.dynamics.BodyType valueOf(java.lang.String) -> valueOf
org.jbox2d.dynamics.ContactManager -> a.a.d.d:
    org.jbox2d.collision.broadphase.BroadPhase m_broadPhase -> a
    org.jbox2d.dynamics.contacts.Contact m_contactList -> b
    int m_contactCount -> c
    org.jbox2d.callbacks.ContactFilter m_contactFilter -> d
    org.jbox2d.callbacks.ContactListener m_contactListener -> e
    org.jbox2d.dynamics.World pool -> f
    void addPair(java.lang.Object,java.lang.Object) -> a
    void findNewContacts() -> a
    void destroy(org.jbox2d.dynamics.contacts.Contact) -> a
    void collide() -> b
org.jbox2d.dynamics.Filter -> a.a.d.e:
    int categoryBits -> a
    int maskBits -> b
    int groupIndex -> c
    void set(org.jbox2d.dynamics.Filter) -> a
org.jbox2d.dynamics.Fixture -> a.a.d.f:
    float m_density -> a
    org.jbox2d.dynamics.Fixture m_next -> b
    org.jbox2d.dynamics.Body m_body -> c
    org.jbox2d.collision.shapes.Shape m_shape -> d
    float m_friction -> e
    float m_restitution -> f
    org.jbox2d.dynamics.FixtureProxy[] m_proxies -> g
    int m_proxyCount -> h
    org.jbox2d.dynamics.Filter m_filter -> i
    boolean m_isSensor -> j
    java.lang.Object m_userData -> k
    org.jbox2d.collision.AABB pool1 -> m
    org.jbox2d.collision.AABB pool2 -> n
    org.jbox2d.common.Vec2 displacement -> o
    boolean $assertionsDisabled -> l
    org.jbox2d.collision.shapes.ShapeType getType() -> a
    org.jbox2d.collision.shapes.Shape getShape() -> b
    boolean isSensor() -> c
    org.jbox2d.dynamics.Filter getFilterData() -> d
    org.jbox2d.dynamics.Body getBody() -> e
    void getMassData(org.jbox2d.collision.shapes.MassData) -> a
    void create(org.jbox2d.dynamics.Body,org.jbox2d.dynamics.FixtureDef) -> a
    void destroy() -> f
    void createProxies(org.jbox2d.collision.broadphase.BroadPhase,org.jbox2d.common.Transform) -> a
    void destroyProxies(org.jbox2d.collision.broadphase.BroadPhase) -> a
    void synchronize(org.jbox2d.collision.broadphase.BroadPhase,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.FixtureDef -> a.a.d.g:
    org.jbox2d.collision.shapes.Shape shape -> a
    java.lang.Object userData -> b
    float friction -> c
    float restitution -> d
    float density -> e
    boolean isSensor -> f
    org.jbox2d.dynamics.Filter filter -> g
org.jbox2d.dynamics.FixtureProxy -> a.a.d.h:
    org.jbox2d.collision.AABB aabb -> a
    org.jbox2d.dynamics.Fixture fixture -> b
    int childIndex -> c
    int proxyId -> d
org.jbox2d.dynamics.Island -> a.a.d.i:
    org.jbox2d.callbacks.ContactListener m_listener -> a
    org.jbox2d.dynamics.Body[] m_bodies -> b
    org.jbox2d.dynamics.contacts.Contact[] m_contacts -> c
    org.jbox2d.dynamics.joints.Joint[] m_joints -> d
    org.jbox2d.dynamics.contacts.Position[] m_positions -> e
    org.jbox2d.dynamics.contacts.Velocity[] m_velocities -> f
    int m_bodyCount -> g
    int m_jointCount -> h
    int m_contactCount -> i
    int m_bodyCapacity -> j
    int m_contactCapacity -> k
    int m_jointCapacity -> l
    org.jbox2d.dynamics.contacts.ContactSolver contactSolver -> n
    org.jbox2d.common.Timer timer -> o
    org.jbox2d.dynamics.SolverData solverData -> p
    org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef solverDef -> q
    org.jbox2d.dynamics.contacts.ContactSolver toiContactSolver -> r
    org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef toiSolverDef -> s
    org.jbox2d.callbacks.ContactImpulse impulse -> t
    boolean $assertionsDisabled -> m
    void init(int,int,int,org.jbox2d.callbacks.ContactListener) -> a
    void clear() -> a
    void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean) -> a
    void solveTOI(org.jbox2d.dynamics.TimeStep,int,int) -> a
    void add(org.jbox2d.dynamics.Body) -> a
    void add(org.jbox2d.dynamics.contacts.Contact) -> a
    void add(org.jbox2d.dynamics.joints.Joint) -> a
    void report(org.jbox2d.dynamics.contacts.ContactVelocityConstraint[]) -> a
org.jbox2d.dynamics.Profile -> a.a.d.j:
    float step -> a
    float collide -> b
    float solve -> c
    float solveInit -> d
    float solveVelocity -> e
    float solvePosition -> f
    float broadphase -> g
    float solveTOI -> h
org.jbox2d.dynamics.SolverData -> a.a.d.k:
    org.jbox2d.dynamics.TimeStep step -> a
    org.jbox2d.dynamics.contacts.Position[] positions -> b
    org.jbox2d.dynamics.contacts.Velocity[] velocities -> c
org.jbox2d.dynamics.TimeStep -> a.a.d.l:
    float dt -> a
    float inv_dt -> b
    float dtRatio -> c
    int velocityIterations -> d
    int positionIterations -> e
    boolean warmStarting -> f
org.jbox2d.dynamics.World -> a.a.d.m:
    int activeContacts -> a
    int contactPoolCount -> b
    int m_flags -> c
    org.jbox2d.dynamics.ContactManager m_contactManager -> d
    org.jbox2d.dynamics.Body m_bodyList -> f
    org.jbox2d.dynamics.joints.Joint m_jointList -> g
    int m_bodyCount -> h
    int m_jointCount -> i
    org.jbox2d.common.Vec2 m_gravity -> j
    boolean m_allowSleep -> k
    org.jbox2d.callbacks.DestructionListener m_destructionListener -> l
    org.jbox2d.callbacks.DebugDraw m_debugDraw -> m
    org.jbox2d.pooling.IWorldPool pool -> n
    float m_inv_dt0 -> o
    boolean m_warmStarting -> p
    boolean m_continuousPhysics -> q
    boolean m_subStepping -> r
    boolean m_stepComplete -> s
    org.jbox2d.dynamics.Profile m_profile -> t
    org.jbox2d.dynamics.contacts.ContactRegister[][] contactStacks -> u
    org.jbox2d.dynamics.TimeStep step -> v
    org.jbox2d.common.Timer stepTimer -> w
    org.jbox2d.common.Timer tempTimer -> x
    org.jbox2d.common.Color3f color -> y
    org.jbox2d.common.Transform xf -> z
    org.jbox2d.common.Vec2 cA -> A
    org.jbox2d.common.Vec2 cB -> B
    org.jbox2d.pooling.arrays.Vec2Array avs -> C
    org.jbox2d.dynamics.WorldQueryWrapper wqwrapper -> D
    org.jbox2d.dynamics.WorldRayCastWrapper wrcwrapper -> E
    org.jbox2d.collision.RayCastInput input -> F
    org.jbox2d.dynamics.Island island -> G
    org.jbox2d.dynamics.Body[] stack -> H
    org.jbox2d.dynamics.Profile islandProfile -> I
    org.jbox2d.common.Timer broadphaseTimer -> J
    org.jbox2d.dynamics.Island toiIsland -> K
    org.jbox2d.collision.TimeOfImpact$TOIInput toiInput -> L
    org.jbox2d.collision.TimeOfImpact$TOIOutput toiOutput -> M
    org.jbox2d.dynamics.TimeStep subStep -> N
    org.jbox2d.dynamics.Body[] tempBodies -> O
    org.jbox2d.common.Sweep backup1 -> P
    org.jbox2d.common.Sweep backup2 -> Q
    java.lang.Integer LIQUID_INT -> R
    float liquidLength -> S
    float averageLinearVel -> T
    org.jbox2d.common.Vec2 liquidOffset -> U
    org.jbox2d.common.Vec2 circCenterMoved -> V
    org.jbox2d.common.Color3f liquidColor -> W
    org.jbox2d.common.Vec2 center -> X
    org.jbox2d.common.Vec2 axis -> Y
    org.jbox2d.common.Vec2 v1 -> Z
    org.jbox2d.common.Vec2 v2 -> aa
    org.jbox2d.pooling.arrays.Vec2Array tlvertices -> ab
    boolean $assertionsDisabled -> e
    void setAllowSleep(boolean) -> a
    void addType(org.jbox2d.pooling.IDynamicStack,org.jbox2d.collision.shapes.ShapeType,org.jbox2d.collision.shapes.ShapeType) -> a
    void initializeRegisters() -> d
    org.jbox2d.dynamics.contacts.Contact popContact(org.jbox2d.dynamics.Fixture,int,org.jbox2d.dynamics.Fixture,int) -> a
    void pushContact(org.jbox2d.dynamics.contacts.Contact) -> a
    org.jbox2d.pooling.IWorldPool getPool() -> a
    void setContactListener(org.jbox2d.callbacks.ContactListener) -> a
    org.jbox2d.dynamics.Body createBody(org.jbox2d.dynamics.BodyDef) -> a
    void destroyBody(org.jbox2d.dynamics.Body) -> a
    org.jbox2d.dynamics.joints.Joint createJoint(org.jbox2d.dynamics.joints.JointDef) -> a
    void destroyJoint(org.jbox2d.dynamics.joints.Joint) -> a
    void step(float,int,int) -> a
    void clearForces() -> b
    void setGravity(org.jbox2d.common.Vec2) -> a
    boolean isLocked() -> c
    void solve(org.jbox2d.dynamics.TimeStep) -> a
    void solveTOI(org.jbox2d.dynamics.TimeStep) -> b
org.jbox2d.dynamics.WorldQueryWrapper -> a.a.d.n:
    org.jbox2d.collision.broadphase.BroadPhase broadPhase -> a
    org.jbox2d.callbacks.QueryCallback callback -> b
    boolean treeCallback(int) -> a
org.jbox2d.dynamics.WorldRayCastWrapper -> a.a.d.o:
    org.jbox2d.collision.RayCastOutput output -> a
    org.jbox2d.common.Vec2 temp -> b
    org.jbox2d.common.Vec2 point -> c
org.jbox2d.dynamics.contacts.ChainAndCircleContact -> a.a.d.a.a:
    org.jbox2d.collision.shapes.EdgeShape edge -> r
    boolean $assertionsDisabled -> a
    void init(org.jbox2d.dynamics.Fixture,int,org.jbox2d.dynamics.Fixture,int) -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.ChainAndPolygonContact -> a.a.d.a.b:
    org.jbox2d.collision.shapes.EdgeShape edge -> r
    boolean $assertionsDisabled -> a
    void init(org.jbox2d.dynamics.Fixture,int,org.jbox2d.dynamics.Fixture,int) -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.CircleContact -> a.a.d.a.c:
    boolean $assertionsDisabled -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.Contact -> a.a.d.a.d:
    int m_flags -> b
    org.jbox2d.dynamics.contacts.Contact m_prev -> c
    org.jbox2d.dynamics.contacts.Contact m_next -> d
    org.jbox2d.dynamics.contacts.ContactEdge m_nodeA -> e
    org.jbox2d.dynamics.contacts.ContactEdge m_nodeB -> f
    org.jbox2d.dynamics.Fixture m_fixtureA -> g
    org.jbox2d.dynamics.Fixture m_fixtureB -> h
    int m_indexA -> i
    int m_indexB -> j
    org.jbox2d.collision.Manifold m_manifold -> k
    float m_toiCount -> l
    float m_toi -> m
    float m_friction -> n
    float m_restitution -> o
    float m_tangentSpeed -> p
    org.jbox2d.pooling.IWorldPool pool -> q
    org.jbox2d.collision.Manifold oldManifold -> a
    void init(org.jbox2d.dynamics.Fixture,int,org.jbox2d.dynamics.Fixture,int) -> a
    org.jbox2d.collision.Manifold getManifold() -> a
    boolean isTouching() -> b
    void setEnabled(boolean) -> a
    boolean isEnabled() -> c
    org.jbox2d.dynamics.contacts.Contact getNext() -> d
    org.jbox2d.dynamics.Fixture getFixtureA() -> e
    int getChildIndexA() -> f
    org.jbox2d.dynamics.Fixture getFixtureB() -> g
    int getChildIndexB() -> h
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
    void flagForFiltering() -> i
    void update(org.jbox2d.callbacks.ContactListener) -> a
    float mixFriction(float,float) -> a
    float mixRestitution(float,float) -> b
org.jbox2d.dynamics.contacts.ContactEdge -> a.a.d.a.e:
    org.jbox2d.dynamics.Body other -> a
    org.jbox2d.dynamics.contacts.Contact contact -> b
    org.jbox2d.dynamics.contacts.ContactEdge prev -> c
    org.jbox2d.dynamics.contacts.ContactEdge next -> d
org.jbox2d.dynamics.contacts.ContactPositionConstraint -> a.a.d.a.f:
    org.jbox2d.common.Vec2[] localPoints -> a
    org.jbox2d.common.Vec2 localNormal -> b
    org.jbox2d.common.Vec2 localPoint -> c
    int indexA -> d
    int indexB -> e
    float invMassA -> f
    float invMassB -> g
    org.jbox2d.common.Vec2 localCenterA -> h
    org.jbox2d.common.Vec2 localCenterB -> i
    float invIA -> j
    float invIB -> k
    org.jbox2d.collision.Manifold$ManifoldType type -> l
    float radiusA -> m
    float radiusB -> n
    int pointCount -> o
org.jbox2d.dynamics.contacts.ContactRegister -> a.a.d.a.g:
    org.jbox2d.pooling.IDynamicStack creator -> a
    boolean primary -> b
org.jbox2d.dynamics.contacts.ContactSolver -> a.a.d.a.h:
    org.jbox2d.dynamics.TimeStep m_step -> a
    org.jbox2d.dynamics.contacts.Position[] m_positions -> b
    org.jbox2d.dynamics.contacts.Velocity[] m_velocities -> c
    org.jbox2d.dynamics.contacts.ContactPositionConstraint[] m_positionConstraints -> d
    org.jbox2d.dynamics.contacts.ContactVelocityConstraint[] m_velocityConstraints -> e
    org.jbox2d.dynamics.contacts.Contact[] m_contacts -> f
    int m_count -> g
    org.jbox2d.common.Vec2 tangent -> i
    org.jbox2d.common.Vec2 temp1 -> j
    org.jbox2d.common.Vec2 temp2 -> k
    org.jbox2d.common.Vec2 P -> l
    org.jbox2d.common.Vec2 temp -> m
    org.jbox2d.common.Transform xfA -> n
    org.jbox2d.common.Transform xfB -> o
    org.jbox2d.collision.WorldManifold worldManifold -> p
    org.jbox2d.common.Vec2 a -> q
    org.jbox2d.common.Vec2 b -> r
    org.jbox2d.common.Vec2 dv1 -> s
    org.jbox2d.common.Vec2 dv2 -> t
    org.jbox2d.common.Vec2 x -> u
    org.jbox2d.common.Vec2 d -> v
    org.jbox2d.common.Vec2 P1 -> w
    org.jbox2d.common.Vec2 P2 -> x
    org.jbox2d.dynamics.contacts.PositionSolverManifold psolver -> y
    org.jbox2d.common.Vec2 rA -> z
    org.jbox2d.common.Vec2 rB -> A
    boolean $assertionsDisabled -> h
    void init(org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef) -> a
    void warmStart() -> a
    void initializeVelocityConstraints() -> b
    void solveVelocityConstraints() -> c
    void storeImpulses() -> d
    boolean solvePositionConstraints() -> e
    boolean solveTOIPositionConstraints(int,int) -> a
org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef -> a.a.d.a.i:
    org.jbox2d.dynamics.TimeStep step -> a
    org.jbox2d.dynamics.contacts.Contact[] contacts -> b
    int count -> c
    org.jbox2d.dynamics.contacts.Position[] positions -> d
    org.jbox2d.dynamics.contacts.Velocity[] velocities -> e
org.jbox2d.dynamics.contacts.ContactVelocityConstraint -> a.a.d.a.j:
    org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint[] points -> a
    org.jbox2d.common.Vec2 normal -> b
    org.jbox2d.common.Mat22 normalMass -> c
    org.jbox2d.common.Mat22 K -> d
    int indexA -> e
    int indexB -> f
    float invMassA -> g
    float invMassB -> h
    float invIA -> i
    float invIB -> j
    float friction -> k
    float restitution -> l
    float tangentSpeed -> m
    int pointCount -> n
    int contactIndex -> o
org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint -> a.a.d.a.k:
    org.jbox2d.common.Vec2 rA -> a
    org.jbox2d.common.Vec2 rB -> b
    float normalImpulse -> c
    float tangentImpulse -> d
    float normalMass -> e
    float tangentMass -> f
    float velocityBias -> g
org.jbox2d.dynamics.contacts.EdgeAndCircleContact -> a.a.d.a.l:
    boolean $assertionsDisabled -> a
    void init(org.jbox2d.dynamics.Fixture,int,org.jbox2d.dynamics.Fixture,int) -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.EdgeAndPolygonContact -> a.a.d.a.m:
    boolean $assertionsDisabled -> a
    void init(org.jbox2d.dynamics.Fixture,int,org.jbox2d.dynamics.Fixture,int) -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.PolygonAndCircleContact -> a.a.d.a.n:
    boolean $assertionsDisabled -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.PolygonContact -> a.a.d.a.o:
    boolean $assertionsDisabled -> a
    void evaluate(org.jbox2d.collision.Manifold,org.jbox2d.common.Transform,org.jbox2d.common.Transform) -> a
org.jbox2d.dynamics.contacts.Position -> a.a.d.a.p:
    org.jbox2d.common.Vec2 c -> a
    float a -> b
org.jbox2d.dynamics.contacts.PositionSolverManifold -> a.a.d.a.q:
    org.jbox2d.common.Vec2 normal -> a
    org.jbox2d.common.Vec2 point -> b
    float separation -> c
    boolean $assertionsDisabled -> d
    void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int) -> a
org.jbox2d.dynamics.contacts.PositionSolverManifold$1 -> a.a.d.a.r:
    int[] $SwitchMap$org$jbox2d$collision$Manifold$ManifoldType -> a
org.jbox2d.dynamics.contacts.Velocity -> a.a.d.a.s:
    org.jbox2d.common.Vec2 v -> a
    float w -> b
org.jbox2d.dynamics.joints.ConstantVolumeJoint -> a.a.d.b.a:
    org.jbox2d.dynamics.Body[] bodies -> a
    float[] targetLengths -> l
    float targetVolume -> m
    org.jbox2d.common.Vec2[] normals -> n
    float m_impulse -> o
    org.jbox2d.dynamics.World world -> p
    org.jbox2d.dynamics.joints.DistanceJoint[] distanceJoints -> q
    void destructor() -> a
    float getBodyArea() -> f
    float getSolverArea(org.jbox2d.dynamics.contacts.Position[]) -> a
    boolean constrainEdges(org.jbox2d.dynamics.contacts.Position[]) -> b
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
org.jbox2d.dynamics.joints.ConstantVolumeJointDef -> a.a.d.b.b:
    float frequencyHz -> a
    float dampingRatio -> b
    java.util.ArrayList bodies -> c
    java.util.ArrayList joints -> d
org.jbox2d.dynamics.joints.DistanceJoint -> a.a.d.b.c:
    float m_frequencyHz -> a
    float m_dampingRatio -> l
    float m_bias -> m
    org.jbox2d.common.Vec2 m_localAnchorA -> n
    org.jbox2d.common.Vec2 m_localAnchorB -> o
    float m_gamma -> p
    float m_impulse -> q
    float m_length -> r
    int m_indexA -> s
    int m_indexB -> t
    org.jbox2d.common.Vec2 m_u -> u
    org.jbox2d.common.Vec2 m_rA -> v
    org.jbox2d.common.Vec2 m_rB -> w
    org.jbox2d.common.Vec2 m_localCenterA -> x
    org.jbox2d.common.Vec2 m_localCenterB -> y
    float m_invMassA -> z
    float m_invMassB -> A
    float m_invIA -> B
    float m_invIB -> C
    float m_mass -> D
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.DistanceJointDef -> a.a.d.b.d:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    float length -> c
    float frequencyHz -> d
    float dampingRatio -> e
    void initialize(org.jbox2d.dynamics.Body,org.jbox2d.dynamics.Body,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2) -> a
org.jbox2d.dynamics.joints.FrictionJoint -> a.a.d.b.e:
    org.jbox2d.common.Vec2 m_localAnchorA -> l
    org.jbox2d.common.Vec2 m_localAnchorB -> m
    org.jbox2d.common.Vec2 m_linearImpulse -> n
    float m_angularImpulse -> o
    float m_maxForce -> p
    float m_maxTorque -> q
    int m_indexA -> r
    int m_indexB -> s
    org.jbox2d.common.Vec2 m_rA -> t
    org.jbox2d.common.Vec2 m_rB -> u
    org.jbox2d.common.Vec2 m_localCenterA -> v
    org.jbox2d.common.Vec2 m_localCenterB -> w
    float m_invMassA -> x
    float m_invMassB -> y
    float m_invIA -> z
    float m_invIB -> A
    org.jbox2d.common.Mat22 m_linearMass -> B
    float m_angularMass -> C
    boolean $assertionsDisabled -> a
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.FrictionJointDef -> a.a.d.b.f:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    float maxForce -> c
    float maxTorque -> d
org.jbox2d.dynamics.joints.GearJoint -> a.a.d.b.g:
    org.jbox2d.dynamics.joints.Joint m_joint1 -> l
    org.jbox2d.dynamics.joints.Joint m_joint2 -> m
    org.jbox2d.dynamics.joints.JointType m_typeA -> n
    org.jbox2d.dynamics.joints.JointType m_typeB -> o
    org.jbox2d.dynamics.Body m_bodyC -> p
    org.jbox2d.dynamics.Body m_bodyD -> q
    org.jbox2d.common.Vec2 m_localAnchorA -> r
    org.jbox2d.common.Vec2 m_localAnchorB -> s
    org.jbox2d.common.Vec2 m_localAnchorC -> t
    org.jbox2d.common.Vec2 m_localAnchorD -> u
    org.jbox2d.common.Vec2 m_localAxisC -> v
    org.jbox2d.common.Vec2 m_localAxisD -> w
    float m_referenceAngleA -> x
    float m_referenceAngleB -> y
    float m_constant -> z
    float m_ratio -> A
    float m_impulse -> B
    int m_indexA -> C
    int m_indexB -> D
    int m_indexC -> E
    int m_indexD -> F
    org.jbox2d.common.Vec2 m_lcA -> G
    org.jbox2d.common.Vec2 m_lcB -> H
    org.jbox2d.common.Vec2 m_lcC -> I
    org.jbox2d.common.Vec2 m_lcD -> J
    float m_mA -> K
    float m_mB -> L
    float m_mC -> M
    float m_mD -> N
    float m_iA -> O
    float m_iB -> P
    float m_iC -> Q
    float m_iD -> R
    org.jbox2d.common.Vec2 m_JvAC -> S
    org.jbox2d.common.Vec2 m_JvBD -> T
    float m_JwA -> U
    float m_JwB -> V
    float m_JwC -> W
    float m_JwD -> X
    float m_mass -> Y
    boolean $assertionsDisabled -> a
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.GearJointDef -> a.a.d.b.h:
    org.jbox2d.dynamics.joints.Joint joint1 -> a
    org.jbox2d.dynamics.joints.Joint joint2 -> b
    float ratio -> c
org.jbox2d.dynamics.joints.Joint -> a.a.d.b.i:
    org.jbox2d.dynamics.joints.JointType m_type -> a
    org.jbox2d.dynamics.joints.Joint m_prev -> b
    org.jbox2d.dynamics.joints.Joint m_next -> c
    org.jbox2d.dynamics.joints.JointEdge m_edgeA -> d
    org.jbox2d.dynamics.joints.JointEdge m_edgeB -> e
    org.jbox2d.dynamics.Body m_bodyA -> f
    org.jbox2d.dynamics.Body m_bodyB -> g
    boolean m_islandFlag -> h
    boolean m_collideConnected -> l
    java.lang.Object m_userData -> i
    org.jbox2d.pooling.IWorldPool pool -> j
    boolean $assertionsDisabled -> k
    org.jbox2d.dynamics.joints.Joint create(org.jbox2d.dynamics.World,org.jbox2d.dynamics.joints.JointDef) -> a
    void destroy(org.jbox2d.dynamics.joints.Joint) -> a
    org.jbox2d.dynamics.joints.JointType getType() -> b
    org.jbox2d.dynamics.Body getBodyA() -> c
    org.jbox2d.dynamics.Body getBodyB() -> d
    boolean getCollideConnected() -> e
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
    void destructor() -> a
org.jbox2d.dynamics.joints.Joint$1 -> a.a.d.b.j:
    int[] $SwitchMap$org$jbox2d$dynamics$joints$JointType -> a
org.jbox2d.dynamics.joints.JointDef -> a.a.d.b.k:
    org.jbox2d.dynamics.joints.JointType type -> f
    java.lang.Object userData -> g
    org.jbox2d.dynamics.Body bodyA -> h
    org.jbox2d.dynamics.Body bodyB -> i
    boolean collideConnected -> j
org.jbox2d.dynamics.joints.JointEdge -> a.a.d.b.l:
    org.jbox2d.dynamics.Body other -> a
    org.jbox2d.dynamics.joints.Joint joint -> b
    org.jbox2d.dynamics.joints.JointEdge prev -> c
    org.jbox2d.dynamics.joints.JointEdge next -> d
org.jbox2d.dynamics.joints.JointType -> a.a.d.b.m:
    org.jbox2d.dynamics.joints.JointType UNKNOWN -> a
    org.jbox2d.dynamics.joints.JointType REVOLUTE -> b
    org.jbox2d.dynamics.joints.JointType PRISMATIC -> c
    org.jbox2d.dynamics.joints.JointType DISTANCE -> d
    org.jbox2d.dynamics.joints.JointType PULLEY -> e
    org.jbox2d.dynamics.joints.JointType MOUSE -> f
    org.jbox2d.dynamics.joints.JointType GEAR -> g
    org.jbox2d.dynamics.joints.JointType WHEEL -> h
    org.jbox2d.dynamics.joints.JointType WELD -> i
    org.jbox2d.dynamics.joints.JointType FRICTION -> j
    org.jbox2d.dynamics.joints.JointType ROPE -> k
    org.jbox2d.dynamics.joints.JointType CONSTANT_VOLUME -> l
    org.jbox2d.dynamics.joints.JointType[] $VALUES -> m
    org.jbox2d.dynamics.joints.JointType[] values() -> values
    org.jbox2d.dynamics.joints.JointType valueOf(java.lang.String) -> valueOf
org.jbox2d.dynamics.joints.LimitState -> a.a.d.b.n:
    org.jbox2d.dynamics.joints.LimitState INACTIVE -> a
    org.jbox2d.dynamics.joints.LimitState AT_LOWER -> b
    org.jbox2d.dynamics.joints.LimitState AT_UPPER -> c
    org.jbox2d.dynamics.joints.LimitState EQUAL -> d
    org.jbox2d.dynamics.joints.LimitState[] $VALUES -> e
    org.jbox2d.dynamics.joints.LimitState[] values() -> values
    org.jbox2d.dynamics.joints.LimitState valueOf(java.lang.String) -> valueOf
org.jbox2d.dynamics.joints.MouseJoint -> a.a.d.b.o:
    org.jbox2d.common.Vec2 m_localAnchorB -> l
    org.jbox2d.common.Vec2 m_targetA -> m
    float m_frequencyHz -> n
    float m_dampingRatio -> o
    float m_beta -> p
    org.jbox2d.common.Vec2 m_impulse -> q
    float m_maxForce -> r
    float m_gamma -> s
    int m_indexB -> t
    org.jbox2d.common.Vec2 m_rB -> u
    org.jbox2d.common.Vec2 m_localCenterB -> v
    float m_invMassB -> w
    float m_invIB -> x
    org.jbox2d.common.Mat22 m_mass -> y
    org.jbox2d.common.Vec2 m_C -> z
    boolean $assertionsDisabled -> a
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
org.jbox2d.dynamics.joints.MouseJointDef -> a.a.d.b.p:
    org.jbox2d.common.Vec2 target -> a
    float maxForce -> b
    float frequencyHz -> c
    float dampingRatio -> d
org.jbox2d.dynamics.joints.PrismaticJoint -> a.a.d.b.q:
    org.jbox2d.common.Vec2 m_localAnchorA -> a
    org.jbox2d.common.Vec2 m_localAnchorB -> l
    org.jbox2d.common.Vec2 m_localXAxisA -> m
    org.jbox2d.common.Vec2 m_localYAxisA -> n
    float m_referenceAngle -> o
    org.jbox2d.common.Vec3 m_impulse -> q
    float m_motorImpulse -> r
    float m_lowerTranslation -> s
    float m_upperTranslation -> t
    float m_maxMotorForce -> u
    float m_motorSpeed -> v
    boolean m_enableLimit -> w
    boolean m_enableMotor -> x
    org.jbox2d.dynamics.joints.LimitState m_limitState -> y
    int m_indexA -> z
    int m_indexB -> A
    org.jbox2d.common.Vec2 m_localCenterA -> B
    org.jbox2d.common.Vec2 m_localCenterB -> C
    float m_invMassA -> D
    float m_invMassB -> E
    float m_invIA -> F
    float m_invIB -> G
    org.jbox2d.common.Vec2 m_axis -> H
    org.jbox2d.common.Vec2 m_perp -> I
    float m_s1 -> J
    float m_s2 -> K
    float m_a1 -> L
    float m_a2 -> M
    org.jbox2d.common.Mat33 m_K -> N
    float m_motorMass -> O
    boolean $assertionsDisabled -> p
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.PrismaticJointDef -> a.a.d.b.r:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    org.jbox2d.common.Vec2 localAxisA -> c
    float referenceAngle -> d
    boolean enableLimit -> e
    float lowerTranslation -> k
    float upperTranslation -> l
    boolean enableMotor -> m
    float maxMotorForce -> n
    float motorSpeed -> o
org.jbox2d.dynamics.joints.PulleyJoint -> a.a.d.b.s:
    org.jbox2d.common.Vec2 m_groundAnchorA -> l
    org.jbox2d.common.Vec2 m_groundAnchorB -> m
    float m_lengthA -> n
    float m_lengthB -> o
    org.jbox2d.common.Vec2 m_localAnchorA -> p
    org.jbox2d.common.Vec2 m_localAnchorB -> q
    float m_constant -> r
    float m_ratio -> s
    float m_impulse -> t
    int m_indexA -> u
    int m_indexB -> v
    org.jbox2d.common.Vec2 m_uA -> w
    org.jbox2d.common.Vec2 m_uB -> x
    org.jbox2d.common.Vec2 m_rA -> y
    org.jbox2d.common.Vec2 m_rB -> z
    org.jbox2d.common.Vec2 m_localCenterA -> A
    org.jbox2d.common.Vec2 m_localCenterB -> B
    float m_invMassA -> C
    float m_invMassB -> D
    float m_invIA -> E
    float m_invIB -> F
    float m_mass -> G
    boolean $assertionsDisabled -> a
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.PulleyJointDef -> a.a.d.b.t:
    org.jbox2d.common.Vec2 groundAnchorA -> a
    org.jbox2d.common.Vec2 groundAnchorB -> b
    org.jbox2d.common.Vec2 localAnchorA -> c
    org.jbox2d.common.Vec2 localAnchorB -> d
    float lengthA -> e
    float lengthB -> k
    float ratio -> l
    boolean $assertionsDisabled -> m
org.jbox2d.dynamics.joints.RevoluteJoint -> a.a.d.b.u:
    org.jbox2d.common.Vec2 m_localAnchorA -> a
    org.jbox2d.common.Vec2 m_localAnchorB -> l
    org.jbox2d.common.Vec3 m_impulse -> o
    float m_motorImpulse -> p
    boolean m_enableMotor -> q
    float m_maxMotorTorque -> r
    float m_motorSpeed -> s
    boolean m_enableLimit -> t
    float m_referenceAngle -> m
    float m_lowerAngle -> u
    float m_upperAngle -> v
    int m_indexA -> w
    int m_indexB -> x
    org.jbox2d.common.Vec2 m_rA -> y
    org.jbox2d.common.Vec2 m_rB -> z
    org.jbox2d.common.Vec2 m_localCenterA -> A
    org.jbox2d.common.Vec2 m_localCenterB -> B
    float m_invMassA -> C
    float m_invMassB -> D
    float m_invIA -> E
    float m_invIB -> F
    org.jbox2d.common.Mat33 m_mass -> G
    float m_motorMass -> H
    org.jbox2d.dynamics.joints.LimitState m_limitState -> I
    boolean $assertionsDisabled -> n
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.RevoluteJointDef -> a.a.d.b.v:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    float referenceAngle -> c
    boolean enableLimit -> d
    float lowerAngle -> e
    float upperAngle -> k
    boolean enableMotor -> l
    float motorSpeed -> m
    float maxMotorTorque -> n
org.jbox2d.dynamics.joints.RopeJoint -> a.a.d.b.w:
    org.jbox2d.common.Vec2 m_localAnchorA -> a
    org.jbox2d.common.Vec2 m_localAnchorB -> l
    float m_maxLength -> m
    float m_length -> n
    float m_impulse -> o
    int m_indexA -> p
    int m_indexB -> q
    org.jbox2d.common.Vec2 m_u -> r
    org.jbox2d.common.Vec2 m_rA -> s
    org.jbox2d.common.Vec2 m_rB -> t
    org.jbox2d.common.Vec2 m_localCenterA -> u
    org.jbox2d.common.Vec2 m_localCenterB -> v
    float m_invMassA -> w
    float m_invMassB -> x
    float m_invIA -> y
    float m_invIB -> z
    float m_mass -> A
    org.jbox2d.dynamics.joints.LimitState m_state -> B
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.RopeJointDef -> a.a.d.b.x:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    float maxLength -> c
org.jbox2d.dynamics.joints.WeldJoint -> a.a.d.b.y:
    float m_frequencyHz -> a
    float m_dampingRatio -> l
    float m_bias -> m
    org.jbox2d.common.Vec2 m_localAnchorA -> n
    org.jbox2d.common.Vec2 m_localAnchorB -> o
    float m_referenceAngle -> p
    float m_gamma -> q
    org.jbox2d.common.Vec3 m_impulse -> r
    int m_indexA -> s
    int m_indexB -> t
    org.jbox2d.common.Vec2 m_rA -> u
    org.jbox2d.common.Vec2 m_rB -> v
    org.jbox2d.common.Vec2 m_localCenterA -> w
    org.jbox2d.common.Vec2 m_localCenterB -> x
    float m_invMassA -> y
    float m_invMassB -> z
    float m_invIA -> A
    float m_invIB -> B
    org.jbox2d.common.Mat33 m_mass -> C
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.WeldJointDef -> a.a.d.b.z:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    float referenceAngle -> c
    float frequencyHz -> d
    float dampingRatio -> e
org.jbox2d.dynamics.joints.WheelJoint -> a.a.d.b.aa:
    float m_frequencyHz -> a
    float m_dampingRatio -> l
    org.jbox2d.common.Vec2 m_localAnchorA -> m
    org.jbox2d.common.Vec2 m_localAnchorB -> n
    org.jbox2d.common.Vec2 m_localXAxisA -> o
    org.jbox2d.common.Vec2 m_localYAxisA -> p
    float m_impulse -> q
    float m_motorImpulse -> r
    float m_springImpulse -> s
    float m_maxMotorTorque -> t
    float m_motorSpeed -> u
    boolean m_enableMotor -> v
    int m_indexA -> w
    int m_indexB -> x
    org.jbox2d.common.Vec2 m_localCenterA -> y
    org.jbox2d.common.Vec2 m_localCenterB -> z
    float m_invMassA -> A
    float m_invMassB -> B
    float m_invIA -> C
    float m_invIB -> D
    org.jbox2d.common.Vec2 m_ax -> E
    org.jbox2d.common.Vec2 m_ay -> F
    float m_sAx -> G
    float m_sBx -> H
    float m_sAy -> I
    float m_sBy -> J
    float m_mass -> K
    float m_motorMass -> L
    float m_springMass -> M
    float m_bias -> N
    float m_gamma -> O
    org.jbox2d.common.Vec2 rA -> P
    org.jbox2d.common.Vec2 rB -> Q
    org.jbox2d.common.Vec2 d -> R
    void initVelocityConstraints(org.jbox2d.dynamics.SolverData) -> a
    void solveVelocityConstraints(org.jbox2d.dynamics.SolverData) -> c
    boolean solvePositionConstraints(org.jbox2d.dynamics.SolverData) -> b
org.jbox2d.dynamics.joints.WheelJointDef -> a.a.d.b.ab:
    org.jbox2d.common.Vec2 localAnchorA -> a
    org.jbox2d.common.Vec2 localAnchorB -> b
    org.jbox2d.common.Vec2 localAxisA -> c
    boolean enableMotor -> d
    float maxMotorTorque -> e
    float motorSpeed -> k
    float frequencyHz -> l
    float dampingRatio -> m
org.jbox2d.pooling.IDynamicStack -> a.a.e.a:
    java.lang.Object pop() -> a
    void push(java.lang.Object) -> a
org.jbox2d.pooling.IWorldPool -> a.a.e.b:
    org.jbox2d.pooling.IDynamicStack getPolyContactStack() -> a
    org.jbox2d.pooling.IDynamicStack getCircleContactStack() -> b
    org.jbox2d.pooling.IDynamicStack getPolyCircleContactStack() -> c
    org.jbox2d.pooling.IDynamicStack getEdgeCircleContactStack() -> d
    org.jbox2d.pooling.IDynamicStack getEdgePolyContactStack() -> e
    org.jbox2d.pooling.IDynamicStack getChainCircleContactStack() -> f
    org.jbox2d.pooling.IDynamicStack getChainPolyContactStack() -> g
    org.jbox2d.common.Vec2 popVec2() -> h
    void pushVec2(int) -> a
    org.jbox2d.common.Vec3 popVec3() -> i
    void pushVec3(int) -> b
    org.jbox2d.common.Mat22 popMat22() -> j
    void pushMat22(int) -> c
    org.jbox2d.common.Mat33 popMat33() -> k
    void pushMat33(int) -> d
    org.jbox2d.common.Rot popRot() -> l
    void pushRot(int) -> e
    org.jbox2d.collision.Collision getCollision() -> m
    org.jbox2d.collision.TimeOfImpact getTimeOfImpact() -> n
    org.jbox2d.collision.Distance getDistance() -> o
    org.jbox2d.common.Vec2[] getVec2Array(int) -> f
org.jbox2d.pooling.arrays.IntArray -> a.a.e.a.a:
    java.util.HashMap map -> b
    boolean $assertionsDisabled -> a
    int[] get(int) -> a
    int[] getInitializedArray(int) -> b
org.jbox2d.pooling.arrays.Vec2Array -> a.a.e.a.b:
    java.util.HashMap map -> b
    boolean $assertionsDisabled -> a
    org.jbox2d.common.Vec2[] get(int) -> a
    org.jbox2d.common.Vec2[] getInitializedArray(int) -> b
org.jbox2d.pooling.normal.DefaultWorldPool -> a.a.e.b.a:
    org.jbox2d.pooling.normal.OrderedStack vecs -> b
    org.jbox2d.pooling.normal.OrderedStack vec3s -> c
    org.jbox2d.pooling.normal.OrderedStack mats -> d
    org.jbox2d.pooling.normal.OrderedStack mat33s -> e
    org.jbox2d.pooling.normal.OrderedStack aabbs -> f
    org.jbox2d.pooling.normal.OrderedStack rots -> g
    java.util.HashMap afloats -> h
    java.util.HashMap aints -> i
    java.util.HashMap avecs -> j
    org.jbox2d.pooling.IWorldPool world -> k
    org.jbox2d.pooling.normal.MutableStack pcstack -> l
    org.jbox2d.pooling.normal.MutableStack ccstack -> m
    org.jbox2d.pooling.normal.MutableStack cpstack -> n
    org.jbox2d.pooling.normal.MutableStack ecstack -> o
    org.jbox2d.pooling.normal.MutableStack epstack -> p
    org.jbox2d.pooling.normal.MutableStack chcstack -> q
    org.jbox2d.pooling.normal.MutableStack chpstack -> r
    org.jbox2d.collision.Collision collision -> s
    org.jbox2d.collision.TimeOfImpact toi -> t
    org.jbox2d.collision.Distance dist -> u
    boolean $assertionsDisabled -> a
    org.jbox2d.pooling.IDynamicStack getPolyContactStack() -> a
    org.jbox2d.pooling.IDynamicStack getCircleContactStack() -> b
    org.jbox2d.pooling.IDynamicStack getPolyCircleContactStack() -> c
    org.jbox2d.pooling.IDynamicStack getEdgeCircleContactStack() -> d
    org.jbox2d.pooling.IDynamicStack getEdgePolyContactStack() -> e
    org.jbox2d.pooling.IDynamicStack getChainCircleContactStack() -> f
    org.jbox2d.pooling.IDynamicStack getChainPolyContactStack() -> g
    org.jbox2d.common.Vec2 popVec2() -> h
    void pushVec2(int) -> a
    org.jbox2d.common.Vec3 popVec3() -> i
    void pushVec3(int) -> b
    org.jbox2d.common.Mat22 popMat22() -> j
    void pushMat22(int) -> c
    org.jbox2d.common.Mat33 popMat33() -> k
    void pushMat33(int) -> d
    org.jbox2d.common.Rot popRot() -> l
    void pushRot(int) -> e
    org.jbox2d.collision.Collision getCollision() -> m
    org.jbox2d.collision.TimeOfImpact getTimeOfImpact() -> n
    org.jbox2d.collision.Distance getDistance() -> o
    org.jbox2d.common.Vec2[] getVec2Array(int) -> f
    org.jbox2d.pooling.IWorldPool access$000(org.jbox2d.pooling.normal.DefaultWorldPool) -> a
org.jbox2d.pooling.normal.DefaultWorldPool$1 -> a.a.e.b.b:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$10 -> a.a.e.b.c:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.common.Mat22 newInstance() -> a
    java.lang.Object newInstance() -> b
org.jbox2d.pooling.normal.DefaultWorldPool$11 -> a.a.e.b.d:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.collision.AABB newInstance() -> a
    java.lang.Object newInstance() -> b
org.jbox2d.pooling.normal.DefaultWorldPool$12 -> a.a.e.b.e:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.common.Rot newInstance() -> a
    java.lang.Object newInstance() -> b
org.jbox2d.pooling.normal.DefaultWorldPool$13 -> a.a.e.b.f:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.common.Mat33 newInstance() -> a
    java.lang.Object newInstance() -> b
org.jbox2d.pooling.normal.DefaultWorldPool$2 -> a.a.e.b.g:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$3 -> a.a.e.b.h:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$4 -> a.a.e.b.i:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$5 -> a.a.e.b.j:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$6 -> a.a.e.b.k:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$7 -> a.a.e.b.l:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.dynamics.contacts.Contact newInstance() -> b
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.DefaultWorldPool$8 -> a.a.e.b.m:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.common.Vec2 newInstance() -> a
    java.lang.Object newInstance() -> b
org.jbox2d.pooling.normal.DefaultWorldPool$9 -> a.a.e.b.n:
    org.jbox2d.pooling.normal.DefaultWorldPool this$0 -> a
    org.jbox2d.common.Vec3 newInstance() -> a
    java.lang.Object newInstance() -> b
org.jbox2d.pooling.normal.MutableStack -> a.a.e.b.o:
    java.lang.Object[] stack -> a
    int index -> c
    int size -> d
    boolean $assertionsDisabled -> b
    void extendStack(int) -> a
    java.lang.Object pop() -> a
    void push(java.lang.Object) -> a
    java.lang.Object newInstance() -> c
org.jbox2d.pooling.normal.OrderedStack -> a.a.e.b.p:
    java.lang.Object[] pool -> a
    int index -> c
    int size -> d
    java.lang.Object[] container -> e
    boolean $assertionsDisabled -> b
    java.lang.Object pop() -> c
    void push(int) -> a
    java.lang.Object newInstance() -> b
